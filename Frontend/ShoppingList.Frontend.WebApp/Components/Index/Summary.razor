@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IItemPriceCalculationService _priceCalculationService;

@using Fluxor;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Services;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error
@using System.Text
@using ShoppingListReduxState = global::ShoppingList.Frontend.Redux.ShoppingList.States
@using System.Globalization;
@using global::ShoppingList.Frontend.Redux.ShoppingList.Actions.Summary;

@inject IState<ShoppingListReduxState.ShoppingListState> State
@inject IDispatcher Dispatcher

<div class="d-flex justify-content-end mt-2">
    <Button Type="@ButtonType.Primary"
            OnClick="@OnSummaryButtonClicked"
            Class="mr-2"
            Disabled="@(!State.Value.ShoppingList?.AnyItemInBasket ?? true)">
        Summary
    </Button>
    <Modal TitleTemplate="@GetTitle()"
           Visible="@State.Value.Summary.IsOpen"
           OnCancel="@OnCloseSummaryButtonClicked"
           ConfirmLoading="@State.Value.Summary.IsSaving"
           Footer="@GetFooter()">
        <div>@GetItemInBasketCountText()</div>
        @if (State.Value.ShoppingList.ItemNotInBasketCount > 0)
        {
            <div class="pt-2">@GetItemNotInBasketCountText()</div>
        }
    </Modal>
</div>

@code {
    private string Title => $"Finish shopping at {State.Value.SelectedStore?.Name}";

    private void OnSummaryButtonClicked()
    {
        if (!State.Value.ShoppingList.AnyItemInBasket)
            return;

        Dispatcher.Dispatch(new OpenSummaryAction());
    }

    private void OnCloseSummaryButtonClicked()
    {
        Dispatcher.Dispatch(new CloseSummaryAction());
    }

    private void OnFinishListButtonClicked()
    {
        Dispatcher.Dispatch(new FinishShoppingListAction());
    }

    private void OnDateChanged(DateTime date)
    {
        Dispatcher.Dispatch(new FinishedAtOnSummaryChangedAction(date));
    }

    private void OnLeaveFinishedAtEditModeClicked()
    {
        Dispatcher.Dispatch(new LeaveFinishedAtEditModeAction());
    }

    private void OnEnterFinishedAtEditModeClicked()
    {
        Dispatcher.Dispatch(new EnterFinishedAtEditModeAction());
    }

    private RenderFragment GetFooter()
    {
        return 
             @<Template>
                   <div class="d-flex">
                       <div class="summary-price font-weight-bold align-self-center">@GetInBasketPrice()€</div>
                       <Button Class="ml-auto"
                               OnClick="OnFinishListButtonClicked"
                               Disabled="State.Value.Summary.IsEditingFinishedAt"
                               @key="@("submit")"
                               Type="@ButtonType.Primary"
                               Loading="@State.Value.Summary.IsSaving">
                           Finish
                       </Button>
                   </div>
               </Template>;
    }

    private RenderFragment GetTitle()
    {
        return @<Template>
                   <div class ="summary-header">
                       <div>@Title</div>
                       <div>
                           @if (State.Value.Summary.IsEditingFinishedAt)
                           {
                               <div class="d-flex summary-datetime-edit">
                                   <div class="summary-date-picker">
                                       <DatePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime"
                                                   Format="dd.MM.yyyy" Value="State.Value.Summary.FinishedAt"
                                                   ValueChanged="OnDateChanged"></DatePicker>
                                   </div>
                                   <div class="summary-time-picker">
                                       <TimePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime"
                                                   Format="HH:mm:ss"
                                                   Value="State.Value.Summary.FinishedAt"
                                                   ValueChanged="OnDateChanged"></TimePicker>
                                   </div>
                                   <div>
                                       <Button Class="d-flex align-items-center"
                                               Size="@AntSizeLDSType.Small"
                                               OnClick="OnLeaveFinishedAtEditModeClicked">
                                           <Icon Type="check" Style="Color: #52c41a;"></Icon>
                                       </Button>
                                   </div>
                               </div>
                           }
                           else
                           {
                               <div class="summary-datetime" @onclick="OnEnterFinishedAtEditModeClicked">@GetDateTime()</div>
                           }
                       </div>
                   </div>
            </Template>
    ;
    }

    private string GetItemInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.Value.ShoppingList.ItemInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("in basket");
        return builder.ToString();
    }

    private string GetItemNotInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.Value.ShoppingList.ItemNotInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("will be moved to the next shopping list");
        return builder.ToString();
    }

    private string GetInBasketPrice()
    {
        var price = _priceCalculationService.GetInBasketPrice(State.Value.ShoppingList!);
        return price.ToString("0.00");
    }

    private string GetDateTime()
    {
        return State.Value.Summary.FinishedAt.ToString("g", CultureInfo.GetCultureInfo("de-de"));
    }
}
