@inject IShoppingListApiService _apiService;
@inject IItemPriceCalculationService _priceCalculationService;

@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Services;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Models
@using System.Text
@using ProjectHermes.ShoppingList.Frontend.Models.ShoppingLists.Services

<div class="d-flex justify-content-end mt-2">
    <Button Type="@ButtonType.Primary"
            OnClick="@OnSummaryButtonClicked"
            Class="mr-2"
            Disabled="@(!State.ShoppingList?.AnyItemInBasket ?? true)">
        Summary
    </Button>
    <Modal TitleTemplate="@GetTitle()"
           Visible="@_summaryVisible"
           OnCancel="@OnCloseSummaryButtonClicked"
           ConfirmLoading="@_loading"
           Footer="@GetFooter()">
        <div>@GetItemInBasketCountText()</div>
        @if (State.ShoppingList.ItemNotInBasketCount > 0)
        {
            <div class="pt-2">@GetItemNotInBasketCountText()</div>
        }
    </Modal>
</div>

@code {
    [Parameter] public ShoppingListState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }
    [Parameter] public Func<Task> OnFinishList { get; set; }
    
    private bool _summaryVisible = false;
    private bool _loading = false;
    private bool _editingFinishedAt = false;
    private DateTime? _finishedAt = null;

    private string Title => $"Finish shopping at {State.SelectedStore?.Name}";

    private void OnSummaryButtonClicked()
    {
        if (!State.ShoppingList.AnyItemInBasket)
            return;
            
        _finishedAt = DateTime.Now;
        _summaryVisible = true;
    }

    private void OnCloseSummaryButtonClicked()
    {
        _summaryVisible = false;
        _loading = false;
    }

    private async Task OnFinishListButtonClicked()
    {
        var finalFinishedAt = new DateTimeOffset(_finishedAt!.Value, DateTimeOffset.Now.Offset);
        _loading = true;
        await _apiService.FinishListAsync(State.ShoppingList.Id, finalFinishedAt, FragmentCreator, async () =>
        {
            await OnFinishList();
            _summaryVisible = false;
        });
        _loading = false;
    }

    private RenderFragment GetFooter()
    {
        return @<Template>
                   <div class="d-flex">
                       <div class="summary-price font-weight-bold align-self-center">@GetInBasketPrice()€</div>
                       <Button Class="ml-auto"
                               OnClick="OnFinishListButtonClicked"
                               @key="@("submit")"
                               Type="@ButtonType.Primary"
                               Disabled="@(_finishedAt is null)"
                               Loading="@_loading">
                           Finish
                       </Button>
                   </div>
               </Template>;
    }

    private RenderFragment GetTitle()
    {
        return @<Template>
                   <div class ="summary-header">
                       <div>@Title</div>
                       <div>
                           @if (_editingFinishedAt)
                           {
                               <div class="d-flex summary-datetime-edit">
                                   <div class="summary-date-picker">
                                       <DatePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime?"
                                                   Format="dd.MM.yyyy" @bind-Value="_finishedAt"></DatePicker>
                                   </div>
                                   <div class="summary-time-picker">
                                       <TimePicker Size="@AntSizeLDSType.Small"
                                                   AllowClear="false"
                                                   TValue="DateTime?"
                                                   Format="HH:mm:ss" @bind-Value="_finishedAt"></TimePicker>
                                   </div>
                                   <div>
                                       <Button Class="d-flex align-items-center"
                                               Size="@AntSizeLDSType.Small"
                                               Disabled="@(_finishedAt is null)"
                                               OnClick="() => _editingFinishedAt = false">
                                           <Icon Type="check" Style="Color: #52c41a;"></Icon>
                                       </Button>
                                   </div>
                               </div>
                           }
                           else
                           {
                               <div class="summary-datetime" @onclick="() => _editingFinishedAt = true">@GetDateTime()</div>
                           }
                       </div>
                   </div>
                </Template>;
    }

    private string GetItemInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.ShoppingList.ItemInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("in basket");
        return builder.ToString();
    }

    private string GetItemNotInBasketCountText()
    {
        var builder = new StringBuilder();
        var count = State.ShoppingList.ItemNotInBasketCount;
        builder.Append(count.ToString());

        builder.Append(count == 1 ? " item " : " items ");

        builder.Append("will be moved to the next shopping list");
        return builder.ToString();
    }

    private string GetInBasketPrice()
    {
        return State.ShoppingList.GetFormattedInBasketPrice(_priceCalculationService);
    }

    private string GetDateTime()
    {
        return _finishedAt!.Value.ToString("g", State.Culture);
    }
}
