@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Services
@using ProjectHermes.ShoppingList.Frontend.Models.ShoppingLists.Services
@using ProjectHermes.ShoppingList.Frontend.Models.ShoppingLists.Models
@using ProjectHermes.ShoppingList.Frontend.Models.Items.Models

@inject ITemporaryItemCreationService temporaryItemCreationService;
@inject IShoppingListApiService apiService;

<div class="mb-2 d-flex">
    <Select OnFocus="OnSearchBarFocusIn"
            Class="@(searchBar.Active ? "ml-1 mr-2 w-100 cursor-text" : "mx-1 w-100 cursor-text")"
            DataSource="searchBar.Options"
            TItem="@SearchItemForShoppingListResult"
            TItemValue="@Guid"
            ValueName="@nameof(SearchItemForShoppingListResult.ItemId)"
            LabelName="@nameof(SearchItemForShoppingListResult.DisplayValue)"
            AutoClearSearchValue="true"
            AllowClear="true"
            OnSearch="s => OnSearchAsync(s)"
            EnableSearch
            OnSelectedItemChanged="item => OnSearchItemSelectedAsync(item)">
    </Select>

    @if (searchBar.Active)
    {
        <Button Type="@ButtonType.Primary"
                OnClick="@OnCreateNewTemporaryItem"
                Class="d-flex align-items-center">
            <Icon Type="plus"></Icon>
        </Button>
        <Button Class="mr-1" OnClick="@OnSearchBarCancelButtonClicked">Cancel</Button>
    }
</div>

@code {
    [Parameter] public Func<Task> ReloadShoppingListAsync { get; set; }
    [Parameter] public ShoppingListState State { get; set; }
    [Parameter] public ErrorHandler ErrorHandler { get; set; }

    private SearchBar searchBar = new SearchBar();

    private async Task OnSearchAsync(string searchInput)
    {
        if (State.ShoppingList.Store == null)
            return;

        if (string.IsNullOrWhiteSpace(searchInput))
        {
            searchBar.ResetOptions();
            return;
        }

        searchInput = searchInput.Trim();
        searchBar.Input = searchInput;

        await apiService.LoadItemSearchResultAsync(searchInput, State.ShoppingList.Store.Id, ErrorHandler, 
            searchResult =>
            {
                searchBar.Options = searchResult;
                StateHasChanged();
            });
    }

    private async void OnCreateNewTemporaryItem()
    {
        var item = temporaryItemCreationService.Create(searchBar.Input);

        await apiService.CreateTemporaryItemOnShoppingListAsync(item, State.ShoppingList.Id,
            State.ShoppingList.Store.Id, State.SelectedStore.DefaultSection.Id);

        State.AddItemToDefaultSection(item);
    }

    private async Task OnSearchItemSelectedAsync(SearchItemForShoppingListResult item)
    {
        if (item == null)
            return;

        async Task OnSuccessAction()
        {
            searchBar.ResetInput();
            searchBar.ResetOptions();
            await State.RequestReloadAsync();
        }

        if(item.ItemTypeId == null)
        {
            await apiService.AddItemToShoppingListAsync(
                State.ShoppingList.Id,
                ItemId.FromActualId(item.ItemId),
                item.DefaultQuantity,
                item.DefaultSectionId,
                ErrorHandler,
                OnSuccessAction);
        }
        else
        {
            await apiService.AddItemWithTypeToShoppingListAsync(
                State.ShoppingList.Id,
                item.ItemId,
                item.ItemTypeId.Value,
                item.DefaultQuantity,
                item.DefaultSectionId, 
                ErrorHandler,
                OnSuccessAction);
        }
    }

    private void OnSearchBarCancelButtonClicked()
    {
        searchBar.Active = false;
        StateHasChanged();
    }

    private void OnSearchBarFocusIn()
    {
        searchBar.Active = true;
        StateHasChanged();
    }
}