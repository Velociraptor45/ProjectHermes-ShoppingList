@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.WebApp.Service.IShoppingListNotificationService notificationService;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Index;

<Select Class="min-w-100 max-w-200 mr-3"
        DataSource="availableStores.Stores"
        @bind-Value="availableStores.SelectedStoreId"
        ValueName="@nameof(Store.Id)"
        LabelName="@nameof(Store.Name)"
        OnSelectedItemChanged="OnSelectionChanged">
</Select>

@code {
    [Parameter] public ShoppingListState Page { get; set; }
    [Parameter] public ErrorReceiver ErrorReceiver { get; set; }

    private AvailableStores availableStores = new AvailableStores(Enumerable.Empty<Store>(), 0);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            await LoadAvailableStoresAsync();
        }
        catch (Exception e)
        {
            var fragment = ErrorReceiver.CreateRetryFragment(async (items) => await LoadAvailableStoresAsync(), new object[0]);
            notificationService.NotifyError("Page loading failed", e.Message, fragment);
            ErrorReceiver.Log(e.ToString());
            return;
        }
    }

    private async Task LoadAvailableStoresAsync()
    {
        List<Store> stores = (await apiClient.GetAllActiveStoresAsync())
            .ToList();

        availableStores = new AvailableStores(stores, stores.FirstOrDefault()?.Id ?? 0);
        Console.WriteLine($"{availableStores.Stores.Count} stores loaded");
    }

    private async void OnSelectionChanged(Store store)
    {
        if (store == null)
            return;

        await Page.ChangeStoreAsync(store.Id);
    }
}