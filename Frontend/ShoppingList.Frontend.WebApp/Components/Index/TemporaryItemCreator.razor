@using ProjectHermes.ShoppingList.Frontend.Models.ShoppingLists.Services
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Services

@using StoreModels = Models.Stores.Models;

@inject ITemporaryItemCreationService _temporaryItemCreationService;
@inject IShoppingListApiService _apiService;

<div class="temporary-item-creator">
    <Button Type="@ButtonType.Primary"
            OnClick="@OnOpenCreationButtonClicked"
            Class="d-flex align-items-center"
            Disabled="@IsOpenModalButtonDisabled()">
        <Icon Type="plus"></Icon>
    </Button>
    <Modal Title="Add temporary item"
           Visible="@_visible"
           OnCancel="@CloseModal"
           ConfirmLoading="@_loading"
           Footer="@GetFooter()">
        <div>
            <Input @bind-Value="@_name"></Input>
            <div>
                <div>Section</div>
                <div class="d-flex">
                    <SingleSelect TItem="StoreModels.Section"
                                  TValue="Guid"
                                  ValueName="Id.BackendId"
                                  LabelName="@nameof(StoreModels.Section.Name)"
                                  DataSource="@State.SelectedStore.Sections.ToList()"
                                  OnItemChanged="@OnSelectedSectionChanged"
                                  DefaultValue="@State.SelectedStore.DefaultSection.Id.BackendId"
                                  @ref="@_singleSelect"></SingleSelect>
                    <div class="d-flex pl-2 align-items-center">
                        <div class="price-input">
                            <Input @bind-Value="@_price"></Input>
                        </div>
                        <div>€</div>
                    </div>
                </div>
            </div>
        </div>
    </Modal>
</div>

@code {
    [Parameter] public ShoppingListState State { get; set; }

    private bool _visible = false;
    private bool _loading = false;

    private string _name = string.Empty;
    private StoreModels.Section _selectedSection;
    private float _price = 1f;

    private SingleSelect<Guid, StoreModels.Section> _singleSelect;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        State.SearchBar.OnInputChanged += _ =>
        {
            StateHasChanged();
        };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _name = State.SearchBar.Input;
        _selectedSection = State.SelectedStore.DefaultSection;
    }

    private void OnOpenCreationButtonClicked()
    {
        _visible = true;
        _loading = false;

        _selectedSection = State.SelectedStore.DefaultSection;
        _price = 1f;
        _name = State.SearchBar.Input;

        _singleSelect?.ResetToDefaultValue();
    }

    private void CloseModal()
    {
        _visible = false;
        _loading = false;
        State.SearchBar.ResetInput();
    }

    private void OnSelectedSectionChanged(StoreModels.Section section)
    {
        _selectedSection = section;
    }

    private async Task OnAddButtonClicked()
    {
        _loading = true;
        
        var item = _temporaryItemCreationService.Create(_name, _price);

        await _apiService.CreateTemporaryItemOnShoppingListAsync(item, State.ShoppingList.Id,
            State.ShoppingList.Store.Id, _selectedSection.Id);

        State.AddItem(item, _selectedSection);

        CloseModal();
    }

    private bool IsOpenModalButtonDisabled()
    {
        return string.IsNullOrWhiteSpace(State.SearchBar.Input);
    }

    private RenderFragment GetFooter()
    {
        return @<Template>
                   <Button Class="ml-auto"
                           OnClick="OnAddButtonClicked"
                           @key="@("submit")"
                           Type="@ButtonType.Primary"
                           Loading="@_loading">
                       Add
                   </Button>
               </Template>;
    }
}
