@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.States
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients.ItemCategorySelectors

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

@if (State.Value.Editor.IsInEditMode)
{
    <div class="ingredient">
        <div class="d-flex align-items-start">
            <div class="item-select">
                <SingleSearchSelect
                    Class="min-w-150"
                    TItem="ItemCategorySearchResult"
                    TValue="Guid"
                    DataSource="@Model.ItemCategorySelector.ItemCategories"
                    ValueName="@nameof(ItemCategorySearchResult.Id)"
                    LabelName="@nameof(ItemCategorySearchResult.Name)"
                    OnItemChanged="@OnItemCategoryChanged"
                    OnItemAdded="@OnNewItemCategoryCreatedAsync"
                    OnInputChanged="OnItemCategoryInputChanged"
                    Placeholder="Item Category"
                    Value="@Model.ItemCategoryId"
                    SearchInput="@Model.ItemCategorySelector.Input"
                    OnDropdownClosed="OnItemCategoryDropdownClosed"
                    CanAddItem="true">
                </SingleSearchSelect>
                @if (Model.ItemCategoryId != Guid.Empty && Model.ItemSelector.Items.Any())
                {
                    <Select Class="mt-1 min-w-150"
                            Placeholder="Default item"
                            ValueName="@nameof(SearchItemByItemCategoryResult.SelectIdentifier)"
                            LabelName="@nameof(SearchItemByItemCategoryResult.Name)"
                            DataSource="@Model.ItemSelector.Items"
                            TItemValue="string"
                            TItem="SearchItemByItemCategoryResult"
                            OnSelectedItemChanged="OnItemChanged"
                            AllowClear="true"
                            IgnoreItemChanges="false"
                            Value="@($"{Model.DefaultItemId?.ToString() ?? string.Empty}{Model.DefaultItemTypeId?.ToString() ?? string.Empty}")">
                    </Select>
                }
            </div>
            <div>
                <Button Class="d-flex align-items-center ml-auto"
                        OnClick="@OnRemoveIngredientButtonClicked"
                        Danger="true">
                    <Icon Type="minus"></Icon>
                </Button>
                <div class="d-flex mt-1">
                    <!-- Quantity -->
                    <AntDesign.InputNumber
                        Class="ml-4 mr-1 w-75"
                        TValue="float"
                        Value="@Model.Quantity"
                        ValueChanged="OnQuantityChanged"
                        Min="1f"
                        Step="1"></AntDesign.InputNumber>
                    <!-- Quantity Type -->
                    <div class="ingredient-quantity-type-select">
                        <SingleSelect
                            TItem="IngredientQuantityType"
                            TValue="int"
                            ValueName="@nameof(IngredientQuantityType.Id)"
                            LabelName="@nameof(IngredientQuantityType.QuantityLabel)"
                            Placeholder="QuantityInPacketType"
                            DefaultValue="@Model.QuantityTypeId"
                            DataSource="@State.Value.IngredientQuantityTypes.ToList()"
                            OnItemChanged="@OnIngredientQuantityTypeChanged">
                        </SingleSelect>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex">
        <div>@Model.SelectedItemCategoryName</div>
        <div class="d-flex ml-auto">
            <div class="mr-1">@Model.Quantity</div>
            <div>@Model.GetSelectedQuantityLabel(State.Value.IngredientQuantityTypes)</div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EditedIngredient Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Dispatcher.Dispatch(new LoadInitialItemsAction(Model));
        Dispatcher.Dispatch(new LoadInitialItemCategoryAction(Model));
    }
    private void OnItemChanged(SearchItemByItemCategoryResult itemSearchResult)
    {
        Dispatcher.Dispatch(new SelectedItemChangedAction(Model.Key, itemSearchResult.ItemId,
            itemSearchResult.ItemTypeId));
    }

    private void OnIngredientQuantityTypeChanged(IngredientQuantityType quantityType)
    {
        Dispatcher.Dispatch(new IngredientQuantityTypeChangedAction(Model.Key, quantityType.Id));
    }

    private void OnQuantityChanged(float quantity)
    {
        Dispatcher.Dispatch(new IngredientQuantityChangedAction(Model.Key, quantity));
    }

    private void OnRemoveIngredientButtonClicked()
    {
        Dispatcher.Dispatch(new IngredientRemovedAction(Model));
    }

    private void OnItemCategoryChanged(ItemCategorySearchResult itemCategory)
    {
        Dispatcher.Dispatch(new SelectedItemCategoryChangedAction(Model.Key, itemCategory.Id));
    }

    private void OnNewItemCategoryCreatedAsync()
    {
        Dispatcher.Dispatch(new CreateNewItemCategoryAction(Model.Key));
    }

    private void OnItemCategoryInputChanged(string input)
    {
        Dispatcher.Dispatch(new ItemCategoryInputChangedAction(Model, input));
    }

    private void OnItemCategoryDropdownClosed()
    {
        Dispatcher.Dispatch(new ItemCategoryDropdownClosedAction(Model));
    }
}