@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.AddToShoppingListModal
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor

<Modal Title="Add To Shoppping List"
       Visible="@State.Value.Editor.IsAddToShoppingListOpen"
       OkText="@("Add to Shopping List")"
       OnOk="OnOkClicked"
       OnCancel="OnCancelClicked">
    <div>
        @if (State.Value.Editor.AddToShoppingList is not null)
        {
            <AntDesign.InputNumber TValue="int" Min="1" Max="100"
                               Value="@State.Value.Editor.AddToShoppingList.NumberOfServings"
                               OnChange="OnNumberOfServingsChanged"></AntDesign.InputNumber>
            @foreach (var item in State.Value.Editor.AddToShoppingList.Items)
            {
                <div class="d-flex align-items-center pb-2">
                    <Checkbox Checked="item.AddToShoppingList"
                      OnChange="isChecked => OnAddItemToShoppingListChanged(isChecked, item)"></Checkbox>
                    <div class="">@item.Quantity</div>
                    <div class="mr-2">@item.QuantityLabel</div>
                    <div>@item.ItemId</div> <!-- TODO -->
                    <SingleSelect TItem="AddToShoppingListAvailability"
                          TValue="Guid"
                          DataSource="item.Availabilities.ToList()"
                          DefaultValue="item.SelectedStoreId"
                          ValueName="@nameof(AddToShoppingListAvailability.StoreId)"
                          LabelName="@nameof(AddToShoppingListAvailability.StoreName)"
                          OnItemChanged="av => OnItemStoreChanged(item, av.StoreId)"></SingleSelect>
                </div>
            }
        }
    </div>
</Modal>

@code {
    private void OnNumberOfServingsChanged(int numberOfServings)
    {
        Dispatcher.Dispatch(new AddToShoppingListNumberOfServingsChangedAction(numberOfServings));
    }

    private void OnAddItemToShoppingListChanged(bool addToShoppingList, AddToShoppingListItem item)
    {
        Dispatcher.Dispatch(new AddItemToShoppingListChangedAction(item.Key, addToShoppingList));
    }

    private void OnOkClicked()
    {
        Dispatcher.Dispatch(new AddItemsToShoppingListAction());
    }

    private void OnCancelClicked()
    {
        Dispatcher.Dispatch(new AddToShoppingListModalClosedAction());
    }

    private void OnItemStoreChanged(AddToShoppingListItem item, Guid storeId)
    {
        Dispatcher.Dispatch(new AddToShoppingListItemStoreChangedAction(item.Key, storeId));
    }
}
