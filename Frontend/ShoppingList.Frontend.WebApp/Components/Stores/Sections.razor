@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Stores.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Stores.Actions.Editor.Sections
@using ProjectHermes.ShoppingList.Frontend.Redux.Stores.States

@inject IDispatcher Dispatcher
@inject IState<StoreState> State


<div class="my-3">
    <div class="d-flex align-items-center pb-1">
        <div>
            Sections
        </div>
        <div class="ml-2">
            <Button Size="@ButtonSize.Small"
                    Class="align-items-center justify-content-center d-flex"
                    OnClick="@OnAddSectionButtonClicked">
                <i class="bi bi-plus-lg"></i>
            </Button>
        </div>
    </div>
    @foreach (var section in State.Value.Editor.Store!.Sections)
    {
        <SortableListItem
            T="EditedSection"
            State="State.Value.Editor.Store"
            Model="section"
            Placeholder="Section name"
            OnIncrement="OnIncrementSection"
            OnDecrement="OnDecrementSection"
            OnRemove="OnRemoveSection"
            OnTextChanged="OnSectionTextChanged"></SortableListItem>
    }
</div>

<div>
    Default Section:
    <SingleSelect TItem="EditedSection"
                  TValue="Guid"
                  ValueName="@nameof(EditedSection.Key)"
                  LabelName="@nameof(EditedSection.Name)"
                  DefaultValue="@State.Value.Editor.Store!.Sections.First(s => s.IsDefaultSection).Key"
                  DataSource="@State.Value.Editor.Store!.Sections.ToList()"
                  IgnoreItemChanges="false"
                  OnItemChanged="OnDefaultSectionChanged"></SingleSelect>
</div>

@code {
    private void OnDefaultSectionChanged(EditedSection section)
    {
        Dispatcher.Dispatch(new DefaultSectionChangedAction(section.Key));
    }

    private void OnAddSectionButtonClicked()
    {
        Dispatcher.Dispatch(new SectionAddedAction());
    }

    private void OnIncrementSection(EditedSection section)
    {
        Dispatcher.Dispatch(new SectionIncrementedAction(section.Key));
    }

    private void OnDecrementSection(EditedSection section)
    {
        Dispatcher.Dispatch(new SectionDecrementedAction(section.Key));
    }

    private void OnRemoveSection(EditedSection section)
    {
        Dispatcher.Dispatch(new SectionRemovedAction(section));
    }

    private void OnSectionTextChanged(EditedSection section, string text)
    {
        Dispatcher.Dispatch(new SectionTextChangedAction(section.Key, text));
    }
}