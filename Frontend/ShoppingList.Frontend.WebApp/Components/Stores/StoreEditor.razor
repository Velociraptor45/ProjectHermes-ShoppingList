@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error;

@inject ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores.Services.IStoresPageCommunicationService communicationService;

@if (State.IsInEditMode)
{
    <div class="px-2">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
                <Icon Type="arrow-left"></Icon>
            </Button>
            <div class="mx-3">
                <Input @bind-Value="@State.EditedStore.Name" />
            </div>
        </div>

        <Sections State="@State"></Sections>

        <div class="d-flex justify-content-end mt-2">
            @if (State.EditedStore.Id == 0)
            {
                <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
            }
            else
            {
                <Button @onclick="@OnSaveButtonClickedAsync">Save</Button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public StoresState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }

    private async Task OnBackButtonClickedAsync()
    {
        await State.LeaveEditorAsync();
    }

    private async Task OnCreateButtonClickedAsync()
    {
        var request = new CreateStoreRequest(Guid.NewGuid(), State.EditedStore);

        var result = await communicationService.CreateStoreAsync(request, async () => await OnCreateButtonClickedAsync(), FragmentCreator);
        if (!result)
            return;

        await State.LeaveEditorAsync();
    }

    private async Task OnSaveButtonClickedAsync()
    {
        var request = new ModifyStoreRequest(Guid.NewGuid(), State.EditedStore.Id, State.EditedStore.Name, State.EditedStore.Sections);

        var result = await communicationService.SaveStoreAsync(request, async () => await OnSaveButtonClickedAsync(), FragmentCreator);

        if (!result)
            return;

        await State.LeaveEditorAsync();
    }
}