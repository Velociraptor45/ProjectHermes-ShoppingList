@using ProjectHermes.ShoppingList.Frontend.Models;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@Store.Name" />
        </div>
    </div>

    <div class="my-3">
        <div class="d-flex align-items-center">
            <div>
                Sections
            </div>
            <div class="ml-2">
                <Button Icon="plus"
                        Class="align-items-center justify-content-center d-flex"
                        OnClick="@OnAddSectionButtonClicked"></Button>
            </div>
        </div>
        @foreach (var section in Store.Sections)
        {
            <Section Model="@section"
                     ParentModel="@Store"
                     StateChangedCallback="@OnStateChanged"
                     OnSectionRemovedCallback="@OnSectionRemoved"></Section>
        }
    </div>

    <div>
        Default Section:
        <SingleSelect DefaultValue="@Store.Sections.First(s => s.IsDefaultSection).Id.ToString()"
                      CanAddItem="false"
                      AllowClear="false"
                      IdToNameMaps="@Store.Sections.OrderBy(s => s.Name).Select(s => new Tuple<int, string>(s.Id, s.Name)).ToList()"
                      OnChangeCallback="@OnDefaultSectionChanged"></SingleSelect>
    </div>

    <div class="d-flex justify-content-end mt-2">
        @if (Store.Id == 0)
        {
            <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
        }
        else
        {
            <Button @onclick="@OnSaveButtonClickedAsync">Save</Button>
        }
    </div>
</div>

@code {
    [Parameter] public Store Store { get; set; }
    [Parameter] public EventCallback<Store> CreateStoreCallback { get; set; }
    [Parameter] public EventCallback<Store> SaveStoreCallback { get; set; }
    [Parameter] public EventCallback LeaveEditorCallback { get; set; }

    private async Task OnBackButtonClickedAsync()
    {
        await LeaveEditorCallback.InvokeAsync(null);
    }

    private async Task OnCreateButtonClickedAsync()
    {
        await CreateStoreCallback.InvokeAsync(Store);
    }

    private async Task OnSaveButtonClickedAsync()
    {
        await SaveStoreCallback.InvokeAsync(Store);
    }

    private void OnDefaultSectionChanged(int id)
    {
        Store.ChangeDefaultSection(id);
    }

    private void OnAddSectionButtonClicked()
    {
        Store.AddSection();
    }

    private void OnSectionRemoved(StoreSection section)
    {
        Store.Sections.Remove(section);
    }

    private void OnStateChanged()
    {
        StateHasChanged();
    }
}