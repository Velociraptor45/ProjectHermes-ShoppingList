@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores.Services
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error;

@inject IStoresApiService apiService;

@if (State.IsInEditMode)
{
    <div class="px-2">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
                <Icon Type="arrow-left"></Icon>
            </Button>
            <div class="mx-3">
                <Input @bind-Value="@State.EditedStore.Name" />
            </div>
        </div>

        <Sections State="@State"></Sections>

        <div class="d-flex justify-content-end mt-2">
            @if (State.EditedStore.Id == Guid.Empty)
            {
                <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
            }
            else
            {
                <Button @onclick="@OnSaveButtonClickedAsync">Save</Button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public StoresState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }

    private async Task OnBackButtonClickedAsync()
    {
        await State.LeaveEditorAsync();
    }

    private async Task OnCreateButtonClickedAsync()
    {
        await apiService.CreateStoreAsync(State.EditedStore, FragmentCreator, async () => await State.LeaveEditorAsync());
    }

    private async Task OnSaveButtonClickedAsync()
    {
        await apiService.SaveStoreAsync(State.EditedStore, FragmentCreator, async () => await State.LeaveEditorAsync());
    }
}