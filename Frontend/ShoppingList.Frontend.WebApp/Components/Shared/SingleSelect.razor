@typeparam TItem
@typeparam TValue
@*<Select Placeholder="@Placeholder"
            DefaultValue="@DefaultValue"
            OnChange="@OnSelectionChanged"
            DropdownRender="@OnRender"
            AllowClear="@AllowClear"
            Class="min-w-100"
            @ref="select">
        @if (GuidToNameMaps == null)
        {
            @foreach (var map in IdToNameMaps)
            {
                <SelectOption Value="@map.Item1.ToString()">@map.Item2</SelectOption>
            }
        }
        else
        {
            @foreach (var map in GuidToNameMaps)
            {
                <SelectOption Value="@map.Item1.ToString()">@map.Item2</SelectOption>
            }
        }
    </Select>*@
<Select Class="min-w-100"
        Placeholder="@Placeholder"
        ValueName="@ValueName"
        LabelName="@LabelName"
        DataSource="@DataSource"
        DefaultValue="@DefaultValue"
        OnSelectedItemChanged="OnSelectedItemChanged"
        AllowClear="@AllowClear">
</Select>

@code {
    [Parameter] public string Placeholder { get; set; }

    [Parameter] public List<TItem> DataSource { get; set; }
    [Parameter] public TValue DefaultValue { get; set; }
    [Parameter] public string ValueName { get; set; }
    [Parameter] public string LabelName { get; set; }

    [Parameter] public bool CanAddItem { get; set; } = false;
    [Parameter] public bool AllowClear { get; set; } = false;

    [Parameter] public EventCallback<TItem> OnItemChanged { get; set; }
    [Parameter] public EventCallback<string> OnItemAdded { get; set; }

    //[Parameter] public List<Tuple<int, string>> IdToNameMaps { get; set; }
    //[Parameter] public List<Tuple<Guid, string>> GuidToNameMaps { get; set; }
    //[Parameter] public Func<string, Task> OnItemAddedCallback { get; set; }
    //[Parameter] public EventCallback<int> OnChangeCallback { get; set; }
    //[Parameter] public EventCallback<Guid> OnChangeCallbackGuid { get; set; }

    private string newItemName = "";

    private async void OnSelectedItemChanged(TItem item)
    {
        await OnItemChanged.InvokeAsync(item);
    }

    private async void OnAddNewItem()
    {
        await OnItemAdded.InvokeAsync(newItemName);
        newItemName = "";
    }

    private RenderFragment OnRender(RenderFragment originNode, Properties properties)
    {
        RenderFragment customDropdownRender =
    @<Template>
        <div>
            @originNode
            @if (CanAddItem)
            {
                <Divider Class="my-1"></Divider>
                <div class="d-flex p-2">
                    <div class="max-w-100">
                        <Input @bind-Value="@newItemName" />
                    </div>
                    <a class="d-flex align-items-center min-w-50 px-2 py-1" @onclick="OnAddNewItem">
                        <Icon Type="plus" Theme="outline"></Icon>
                    </a>
                </div>
            }
        </div>
    </Template>;
return customDropdownRender;
}
}