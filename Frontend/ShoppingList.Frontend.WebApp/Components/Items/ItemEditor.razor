@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items.Editor;
@using System.Collections.Generic;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@StoreItem.Name" />
        </div>
        @if (StoreItem.Id != 0)
        {
            <Button Danger="true"
                    Class="ml-auto"
                    OnClick="@OnDeleteButtonClickedAsync">
                Delete
            </Button>
        }
    </div>
    <Divider Class="my-3"></Divider>
    <div class="d-flex pb-2">
        <ItemCategorySelect State="@State"
                            Item="@StoreItem"
                            FragmentCreator="@ErrorHandler"></ItemCategorySelect>
        <ManufacturerSelect State="@State"
                            Item="@StoreItem"
                            FragmentCreator="@ErrorHandler"></ManufacturerSelect>
    </div>
    <Quantity State="@State"
              Item="@StoreItem"></Quantity>
    <div class="mt-3 d-flex justify-content-start align-items-center">
        <div class="font-weight-bold mr-2">Stores</div>
        <Button class="d-flex align-items-center" OnClick="OnAddStoreButtonClicked"
                Disabled="@(GetNotRegisteredStore(StoreItem) == null)">
            <Icon Type="plus"></Icon>
        </Button>
    </div>
    <Availabilities State="@State"
                    Item="@StoreItem"></Availabilities>
    <div class="pb-2 pt-4">
        <TextArea Placeholder="Comment" MinRows="2" @bind-Value="@StoreItem.Comment"></TextArea>
    </div>
    <div class="d-flex justify-content-end">
        @if (StoreItem.Id == 0)
        {
            <Button OnClick="@OnCreateButtonClicked">Create</Button>
        }
        else if (StoreItem.IsTemporary)
        {
            <Button OnClick="@OnMakePermanentButtonClicked">Make Permanent</Button>
        }
        else
        {
            <Button OnClick="@OnUpdateButtonClickedAsync">Update</Button>
            <Button Class="ml-2" OnClick="@OnModifyButtonClickedAsync">Modify</Button>
        }
    </div>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public ItemsErrorHandler ErrorHandler { get; set; }

    [Parameter] public StoreItem StoreItem { get; set; }
    [Parameter] public List<Store> Stores { get; set; }
    [Parameter] public List<Manufacturer> Manufacturers { get; set; }
    [Parameter] public List<ItemCategory> ItemCategories { get; set; }
    [Parameter] public List<QuantityType> QuantityTypes { get; set; }
    [Parameter] public List<QuantityTypeInPacket> QuantityTypesInPacket { get; set; }

    [Parameter] public EventCallback<StoreItem> UpdateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> ModifyItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> CreateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> MakeTemporaryItemPermanentCallback { get; set; }
    [Parameter] public EventCallback<int> DeleteItemCallback { get; set; }
    [Parameter] public EventCallback LeaveEditorCallback { get; set; }

    private int GetIndex(StoreItemAvailability av)
    {
        return StoreItem.Availabilities.IndexOf(av);
    }

    private void OnAddStoreButtonClicked()
    {
        var availableStore = GetNotRegisteredStore(StoreItem);
        if (availableStore == null)
            return;

        StoreItem.Availabilities.Add(
            new StoreItemAvailability(availableStore, 1, GetSectionForStoreId(availableStore.Id)));

        StateHasChanged();
    }

    private async Task OnUpdateButtonClickedAsync()
    {
        await UpdateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnModifyButtonClickedAsync()
    {
        await ModifyItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnCreateButtonClicked()
    {
        await CreateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnMakePermanentButtonClicked()
    {
        if (!StoreItem.ItemCategoryId.HasValue)
            return;

        await MakeTemporaryItemPermanentCallback.InvokeAsync(StoreItem);
    }

    private async Task OnDeleteButtonClickedAsync()
    {
        await DeleteItemCallback.InvokeAsync(StoreItem.Id);
    }

    private async Task OnBackButtonClickedAsync()
    {
        await LeaveEditorCallback.InvokeAsync(null);
    }

    private StoreItemStore GetNotRegisteredStore(StoreItem storeItem)
    {
        var registeredStoreIds = storeItem.Availabilities.Select(av => av.Store.Id).OrderBy(id => id);
        var allStoreIds = Stores.Select(s => s.Id).OrderBy(id => id);

        if (allStoreIds.SequenceEqual(registeredStoreIds))
            return null;

        var availableStoreId = allStoreIds.Except(registeredStoreIds).First();
        return Stores.Single(s => s.Id == availableStoreId).AsStoreItemStore();
    }

    private StoreItemSection GetSectionForStoreId(int storeId)
    {
        var section = Stores.Single(s => s.Id == storeId).Sections.Single(s => s.IsDefaultSection);
        return section.AsStoreItemSection();
    }
}