@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using System.Collections.Generic;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@StoreItem.Name" />
        </div>
        @if (StoreItem.Id != 0)
        {
            <Button Danger="true"
                    Class="ml-auto"
                    OnClick="@OnDeleteButtonClickedAsync">
                Delete
            </Button>
        }
    </div>
    <Divider Class="my-3"></Divider>
    <div class="d-flex pb-2">
        <div>
            <div class="font-weight-bold">Category</div>
            <SingleSelect Placeholder="Item Category"
                          DefaultValue="@StoreItem.ItemCategoryId.GetValueOrDefault().ToString()"
                          CanAddItem="true"
                          IdToNameMaps="@ItemCategories.Select(m => new Tuple<int, string>(m.Id, m.Name)).ToList()"
                          OnChangeCallback="@OnItemCategoryChanged"
                          OnItemAddedCallback="@ItemCategoryCreatedCallback">
            </SingleSelect>
        </div>
        <div class="ml-3">
            <div class="font-weight-bold">Manufacturer</div>
            <SingleSelect Placeholder="Manufacturer"
                          DefaultValue="@StoreItem.ManufacturerId.ToString()"
                          CanAddItem="true"
                          AllowClear="true"
                          IdToNameMaps="@Manufacturers.Select(m => new Tuple<int, string>(m.Id, m.Name)).ToList()"
                          OnChangeCallback="@OnManfacturerChanged"
                          OnItemAddedCallback="@ManufacturerCreatedCallback">
            </SingleSelect>
        </div>
    </div>
    <div class="d-flex py-2">
        <SingleSelect Placeholder="QuantityType"
                      DefaultValue="@StoreItem.QuantityType.Id.ToString()"
                      CanAddItem="false"
                      IdToNameMaps="@QuantityTypes.Select(m => new Tuple<int, string>(m.Id, m.Name)).ToList()"
                      OnChangeCallback="@OnQuantityTypeChanged">
        </SingleSelect>
        @if (StoreItem.QuantityType.Id == 0)
        {
            <div class="ml-3 d-flex flex-column">
                <SingleSelect Placeholder="QuantityInPacketType"
                              DefaultValue="@StoreItem.QuantityInPacketType.Id.ToString()"
                              CanAddItem="false"
                              IdToNameMaps="@QuantityTypesInPacket.Select(m => new Tuple<int, string>(m.Id, m.Name)).ToList()"
                              OnChangeCallback="@OnQuantityInPacketTypeChanged">
                </SingleSelect>
                <div class="d-flex">
                    <div class="max-w-50">
                        <Input @bind-Value="@StoreItem.QuantityInPacket"></Input>
                    </div>
                    <div class="mt-1">@StoreItem.QuantityInPacketType.QuantityLabel</div>
                </div>
            </div>
        }
    </div>
    <div class="font-weight-bold">Stores</div>
    <div class="d-flex flex-row py-2">
        <!-- availabilities -->
        <div>
            @for (int i = 0; i < StoreItem.Availabilities.Count; i++)
            {
                <Availablity ComponentIndex="i"
                             Availability="@StoreItem.Availabilities[i]"
                             PriceLabel="@StoreItem.QuantityType.PriceLabel"
                             Stores="@Stores"
                             DisabledStoreIds="@GetDisabledStoresForAvailabilityByIndex(i)"
                             OnRemoveAvailabilityCallback="@OnRemoveAvailabilityButtonClicked"></Availablity>
            }
        </div>
        <div class="ml-4 d-flex justify-content-end">
            <Button class="d-flex align-items-center" OnClick="OnAddStoreButtonClicked"
                    Disabled="@(GetNotRegisteredStore(StoreItem) == null)">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
    </div>
    <div class="pb-2 pt-4">
        <TextArea Placeholder="Comment" MinRows="2" @bind-Value="@StoreItem.Comment"></TextArea>
    </div>
    <div class="d-flex justify-content-end">
        @if (StoreItem.Id == 0)
        {
            <Button OnClick="@OnCreateButtonClicked">Create</Button>
        }
        else if (StoreItem.IsTemporary)
        {
            <Button OnClick="@OnMakePermanentButtonClicked">Make Permanent</Button>
        }
        else
        {
            <Button OnClick="@OnUpdateButtonClickedAsync">Update</Button>
            <Button Class="ml-2" OnClick="@OnModifyButtonClickedAsync">Modify</Button>
        }
    </div>
</div>

@code {
    [Parameter] public StoreItem StoreItem { get; set; }
    [Parameter] public List<Store> Stores { get; set; }
    [Parameter] public List<Manufacturer> Manufacturers { get; set; }
    [Parameter] public List<ItemCategory> ItemCategories { get; set; }
    [Parameter] public List<QuantityType> QuantityTypes { get; set; }
    [Parameter] public List<QuantityTypeInPacket> QuantityTypesInPacket { get; set; }

    [Parameter] public EventCallback<StoreItem> UpdateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> ModifyItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> CreateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> MakeTemporaryItemPermanentCallback { get; set; }
    [Parameter] public EventCallback<int> DeleteItemCallback { get; set; }
    [Parameter] public EventCallback LeaveEditorCallback { get; set; }
    [Parameter] public Func<string, Task> ManufacturerCreatedCallback { get; set; }
    [Parameter] public Func<string, Task> ItemCategoryCreatedCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private int GetIndex(StoreItemAvailability av)
    {
        return StoreItem.Availabilities.IndexOf(av);
    }

    private void OnAddStoreButtonClicked()
    {
        var availableStore = GetNotRegisteredStore(StoreItem);
        if (availableStore == null)
            return;

        StoreItem.Availabilities.Add(
            new StoreItemAvailability(availableStore, 1, GetSectionForStoreId(availableStore.Id)));

        StateHasChanged();
    }

    private void OnRemoveAvailabilityButtonClicked(int availabilityIndex)
    {
        StoreItem.Availabilities.RemoveAt(availabilityIndex);
        StateHasChanged();
    }

    private async Task OnUpdateButtonClickedAsync()
    {
        await UpdateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnModifyButtonClickedAsync()
    {
        await ModifyItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnCreateButtonClicked()
    {
        await CreateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnMakePermanentButtonClicked()
    {
        if (!StoreItem.ItemCategoryId.HasValue)
            return;

        await MakeTemporaryItemPermanentCallback.InvokeAsync(StoreItem);
    }

    private async Task OnDeleteButtonClickedAsync()
    {
        await DeleteItemCallback.InvokeAsync(StoreItem.Id);
    }

    private async Task OnBackButtonClickedAsync()
    {
        await LeaveEditorCallback.InvokeAsync(null);
    }

    private void OnManfacturerChanged(int id)
    {
        if (id == -1)
        {
            StoreItem.ManufacturerId = null;
            return;
        }

        StoreItem.ManufacturerId = id;
    }

    private void OnItemCategoryChanged(int id)
    {
        StoreItem.ItemCategoryId = id;
    }

    private void OnQuantityTypeChanged(int id)
    {
        StoreItem.QuantityType = GetQuantityTypeById(id);
    }

    private void OnQuantityInPacketTypeChanged(int id)
    {
        StoreItem.QuantityInPacketType = GetQuantityInPacketTypeById(id);
    }

    private StoreItemStore GetNotRegisteredStore(StoreItem storeItem)
    {
        var registeredStoreIds = storeItem.Availabilities.Select(av => av.Store.Id);
        var allStoreIds = Stores.Select(s => s.Id);

        if (allStoreIds.SequenceEqual(registeredStoreIds))
            return null;

        var availableStoreId = allStoreIds.Except(registeredStoreIds).First();
        var availableStore = Stores.Single(s => s.Id == availableStoreId);
        return new StoreItemStore(availableStore.Id, availableStore.Name,
            availableStore.Sections.Select(s => new StoreItemSection(s.Id, s.Name, s.SortingIndex)));
    }

    private StoreItemSection GetSectionForStoreId(int storeId)
    {
        var section = Stores.Single(s => s.Id == storeId).Sections.Single(s => s.IsDefaultSection);
        return new StoreItemSection(section.Id, section.Name, section.SortingIndex);
    }

    private IEnumerable<int> GetRegisteredStoreIds(StoreItem storeItem)
    {
        return storeItem.Availabilities.Select(av => av.Store.Id);
    }

    private IEnumerable<int> GetDisabledStoresForAvailabilityByIndex(int availabilityIndex)
    {
        return GetRegisteredStoreIds(StoreItem)
            .Except(new List<int>() { StoreItem.Availabilities[availabilityIndex].Store.Id });
    }

    private QuantityType GetQuantityTypeById(int id)
    {
        return QuantityTypes.FirstOrDefault(type => type.Id == id);
    }

    private QuantityTypeInPacket GetQuantityInPacketTypeById(int id)
    {
        return QuantityTypesInPacket.FirstOrDefault(type => type.Id == id);
    }
}