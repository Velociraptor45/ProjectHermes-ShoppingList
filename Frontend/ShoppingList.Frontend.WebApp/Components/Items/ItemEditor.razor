@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using System.Collections.Generic;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@StoreItem.Name" />
        </div>
        @if (StoreItem.Id != 0)
        {
            <Button Danger="true"
                    Class="ml-auto"
                    OnClick="@OnDeleteButtonClickedAsync">
                Delete
            </Button>
        }
    </div>
    <Divider Class="my-3"></Divider>
    <div class="d-flex pb-2">
        <div>
            <div class="font-weight-bold">Category</div>
            <SingleSelect TItem="ItemCategory"
                          TValue="int"
                          ValueName="@nameof(ItemCategory.Id)"
                          LabelName="@nameof(ItemCategory.Name)"
                          DataSource="@ItemCategories"
                          OnItemAdded="@ItemCategoryCreatedCallback"
                          OnItemChanged="@OnItemCategoryChanged"
                          Placeholder="Item Category"
                          DefaultValue="@StoreItem.ItemCategoryId.GetValueOrDefault()"
                          CanAddItem="true">
            </SingleSelect>
        </div>
        <div class="ml-3">
            <div class="font-weight-bold">Manufacturer</div>
            <SingleSelect TItem="Manufacturer"
                          TValue="int"
                          ValueName="@nameof(Manufacturer.Id)"
                          LabelName="@nameof(Manufacturer.Name)"
                          DataSource="@Manufacturers"
                          OnItemChanged="@OnManfacturerChanged"
                          OnItemAdded="@ManufacturerCreatedCallback"
                          Placeholder="Manufacturer"
                          DefaultValue="@StoreItem.ManufacturerId.GetValueOrDefault()"
                          CanAddItem="true"
                          AllowClear="true">
            </SingleSelect>
        </div>
    </div>
    <div class="d-flex flex-column py-2">
        <SingleSelect Class="max-w-200"
                      TItem="QuantityType"
                      TValue="int"
                      ValueName="@nameof(QuantityType.Id)"
                      LabelName="@nameof(QuantityType.Name)"
                      Placeholder="QuantityType"
                      DefaultValue="@StoreItem.QuantityType.Id"
                      DataSource="@QuantityTypes"
                      OnItemChanged="@OnQuantityTypeChanged">
        </SingleSelect>
        @if (StoreItem.QuantityType.Id == 0)
        {
            <div class="ml-4 mt-1 d-flex">
                <SingleSelect Class="max-w-100"
                              TItem="QuantityTypeInPacket"
                              TValue="int"
                              ValueName="@nameof(QuantityTypeInPacket.Id)"
                              LabelName="@nameof(QuantityTypeInPacket.Name)"
                              Placeholder="QuantityInPacketType"
                              DefaultValue="@StoreItem.QuantityInPacketType.Id"
                              DataSource="@QuantityTypesInPacket"
                              OnItemChanged="@OnQuantityInPacketTypeChanged">
                </SingleSelect>
                <div class="ml-2 d-flex">
                    <div class="max-w-50">
                        <Input @bind-Value="@StoreItem.QuantityInPacket" />
                    </div>
                    <div class="mt-1">@StoreItem.QuantityInPacketType.QuantityLabel</div>
                </div>
            </div>
        }
    </div>
    <div class="mt-3 d-flex justify-content-start align-items-center">
        <div class="font-weight-bold mr-2">Stores</div>
            <Button class="d-flex align-items-center" OnClick="OnAddStoreButtonClicked"
                    Disabled="@(GetNotRegisteredStore(StoreItem) == null)">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
    <div class="d-flex flex-row py-2">
        <!-- availabilities -->
        <div>
            @for (int i = 0; i < StoreItem.Availabilities.Count; i++)
            {
                <Availablity ComponentIndex="i"
                             Availability="@StoreItem.Availabilities[i]"
                             PriceLabel="@StoreItem.QuantityType.PriceLabel"
                             Stores="@Stores"
                             OnRemoveAvailabilityCallback="@OnRemoveAvailabilityButtonClicked"></Availablity>
            }
        </div>
    </div>
    <div class="pb-2 pt-4">
        <TextArea Placeholder="Comment" MinRows="2" @bind-Value="@StoreItem.Comment"></TextArea>
    </div>
    <div class="d-flex justify-content-end">
        @if (StoreItem.Id == 0)
        {
            <Button OnClick="@OnCreateButtonClicked">Create</Button>
        }
        else if (StoreItem.IsTemporary)
        {
            <Button OnClick="@OnMakePermanentButtonClicked">Make Permanent</Button>
        }
        else
        {
            <Button OnClick="@OnUpdateButtonClickedAsync">Update</Button>
            <Button Class="ml-2" OnClick="@OnModifyButtonClickedAsync">Modify</Button>
        }
    </div>
</div>

@code {
    [Parameter] public StoreItem StoreItem { get; set; }
    [Parameter] public List<Store> Stores { get; set; }
    [Parameter] public List<Manufacturer> Manufacturers { get; set; }
    [Parameter] public List<ItemCategory> ItemCategories { get; set; }
    [Parameter] public List<QuantityType> QuantityTypes { get; set; }
    [Parameter] public List<QuantityTypeInPacket> QuantityTypesInPacket { get; set; }

    [Parameter] public EventCallback<StoreItem> UpdateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> ModifyItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> CreateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> MakeTemporaryItemPermanentCallback { get; set; }
    [Parameter] public EventCallback<int> DeleteItemCallback { get; set; }
    [Parameter] public EventCallback LeaveEditorCallback { get; set; }
    [Parameter] public Func<string, Task> ManufacturerCreatedCallback { get; set; }
    [Parameter] public Func<string, Task> ItemCategoryCreatedCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private int GetIndex(StoreItemAvailability av)
    {
        return StoreItem.Availabilities.IndexOf(av);
    }

    private void OnAddStoreButtonClicked()
    {
        var availableStore = GetNotRegisteredStore(StoreItem);
        if (availableStore == null)
            return;

        StoreItem.Availabilities.Add(
            new StoreItemAvailability(availableStore, 1, GetSectionForStoreId(availableStore.Id)));

        StateHasChanged();
    }

    private void OnRemoveAvailabilityButtonClicked(int availabilityIndex)
    {
        StoreItem.Availabilities.RemoveAt(availabilityIndex);
        StateHasChanged();
    }

    private async Task OnUpdateButtonClickedAsync()
    {
        await UpdateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnModifyButtonClickedAsync()
    {
        await ModifyItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnCreateButtonClicked()
    {
        await CreateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnMakePermanentButtonClicked()
    {
        if (!StoreItem.ItemCategoryId.HasValue)
            return;

        await MakeTemporaryItemPermanentCallback.InvokeAsync(StoreItem);
    }

    private async Task OnDeleteButtonClickedAsync()
    {
        await DeleteItemCallback.InvokeAsync(StoreItem.Id);
    }

    private async Task OnBackButtonClickedAsync()
    {
        await LeaveEditorCallback.InvokeAsync(null);
    }

    private void OnManfacturerChanged(Manufacturer manufacturer)
    {
        StoreItem.ManufacturerId = manufacturer?.Id;
    }

    private void OnItemCategoryChanged(ItemCategory itemCategory)
    {
        StoreItem.ItemCategoryId = itemCategory.Id;
    }

    private void OnQuantityTypeChanged(QuantityType quantityType)
    {
        StoreItem.QuantityType = quantityType;
    }

    private void OnQuantityInPacketTypeChanged(QuantityTypeInPacket quantityTypeInPacket)
    {
        StoreItem.QuantityInPacketType = quantityTypeInPacket;
    }

    private StoreItemStore GetNotRegisteredStore(StoreItem storeItem)
    {
        var registeredStoreIds = storeItem.Availabilities.Select(av => av.Store.Id);
        var allStoreIds = Stores.Select(s => s.Id);

        if (allStoreIds.SequenceEqual(registeredStoreIds))
            return null;

        var availableStoreId = allStoreIds.Except(registeredStoreIds).First();
        return Stores.Single(s => s.Id == availableStoreId).AsStoreItemStore();
    }

    private StoreItemSection GetSectionForStoreId(int storeId)
    {
        var section = Stores.Single(s => s.Id == storeId).Sections.Single(s => s.IsDefaultSection);
        return section.AsStoreItemSection();
    }
}