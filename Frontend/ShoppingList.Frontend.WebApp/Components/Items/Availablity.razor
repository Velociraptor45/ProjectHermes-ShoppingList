@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using OneOf;

<div class="d-flex flex-row align-items-center">
    <div class="max-w-60">
        <Input @bind-Value="@Availability.PricePerQuantity" />
    </div>
    <div class="mr-4">@PriceLabel</div>
    <Select DataSource="Stores"
            TItem="Store"
            TItemValue="int"
            DefaultValue="Availability.Store.Id"
            ValueName="@nameof(Store.Id)"
            LabelName="@nameof(Store.Name)"
            OnSelectedItemChanged="@OnStoreChanged">
    </Select>
    <SingleSelect TItem="StoreItemSection"
                  TValue="int"
                  ValueName="@nameof(StoreItemSection.Id)"
                  LabelName="@nameof(StoreItemSection.Name)"
                  DataSource="@Availability.Store.Sections.ToList()"
                  OnItemChanged="OnDefaultSectionChanged"
                  DefaultValue="@Availability.DefaultSection.Id"></SingleSelect>
    <div class="ml-2">
        <Button Class="d-flex align-items-center"
                OnClick="@OnRemoveStoreButtonClickedAsync"
                Danger="true">
            <Icon Type="minus"></Icon>
        </Button>
    </div>
</div>

@code {
    [Parameter] public int ComponentIndex { get; set; }
    [Parameter] public StoreItemAvailability Availability { get; set; }
    [Parameter] public string PriceLabel { get; set; }
    [Parameter] public List<Store> Stores { get; set; }

    [Parameter] public EventCallback<int> OnRemoveAvailabilityCallback { get; set; }

    private void OnStoreChanged(Store store)
    {
        Availability.Store = store.AsStoreItemStore();

        var defaultSection = store.Sections.Single(s => s.IsDefaultSection);
        Availability.ChangeDefaultSection(defaultSection.AsStoreItemSection());
        StateHasChanged();
    }

    private async Task OnRemoveStoreButtonClickedAsync()
    {
        await OnRemoveAvailabilityCallback.InvokeAsync(ComponentIndex);
    }

    private void OnDefaultSectionChanged(StoreItemSection section)
    {
        Availability.ChangeDefaultSection(section);
    }
}