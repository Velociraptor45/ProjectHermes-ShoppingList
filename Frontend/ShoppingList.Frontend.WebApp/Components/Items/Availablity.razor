@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using OneOf;

<div class="d-flex flex-row align-items-center">
    <div class="max-w-60">
        <Input @bind-Value="@Availability.PricePerQuantity" />
    </div>
    <div class="mr-4">@PriceLabel</div>
    <Select Placeholder="Stores" DefaultValue="@Availability.StoreId.ToString()" OnChange="@OnStoreChanged">
        @foreach (var store in Stores)
        {
            <SelectOption Value=@store.Id.ToString() Class="min-w-100"
                          Disabled="@DisabledStoreIds.Contains(store.Id)">@store.Name</SelectOption>
                    }
    </Select>
    <div class="ml-2">
        <Button Class="d-flex align-items-center"
                OnClick="@OnRemoveStoreButtonClickedAsync"
                Danger="true">
            <Icon Type="minus"></Icon>
        </Button>
    </div>
</div>

@code {
    [Parameter] public int ComponentIndex { get; set; }
    [Parameter] public StoreItemAvailability Availability { get; set; }
    [Parameter] public string PriceLabel { get; set; }
    [Parameter] public List<Store> Stores { get; set; }
    [Parameter] public IEnumerable<int> DisabledStoreIds { get; set; }

    [Parameter] public EventCallback<int> OnRemoveAvailabilityCallback { get; set; }

    private void OnStoreChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        var storeId = int.Parse(value.AsT0);
        Availability.StoreId = storeId;
    }

    private async Task OnRemoveStoreButtonClickedAsync()
    {
        await OnRemoveAvailabilityCallback.InvokeAsync(ComponentIndex);
    }
}