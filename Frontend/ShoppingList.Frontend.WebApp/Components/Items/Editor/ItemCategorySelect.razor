@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error;

@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.WebApp.Services.Notification.IShoppingListNotificationService notificationService;

<div>
    <div class="font-weight-bold">Category</div>
    <SingleSelect TItem="ItemCategory"
                  TValue="int"
                  ValueName="@nameof(ItemCategory.Id)"
                  LabelName="@nameof(ItemCategory.Name)"
                  DataSource="@State.ItemCategories.ToList()"
                  OnItemAdded="@OnNewItemCategoryCreatedAsync"
                  OnItemChanged="@OnItemCategoryChanged"
                  Placeholder="Item Category"
                  DefaultValue="@State.EditedItem.ItemCategoryId.GetValueOrDefault()"
                  CanAddItem="true">
    </SingleSelect>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }

    private void OnItemCategoryChanged(ItemCategory itemCategory)
    {
        State.EditedItem.ItemCategoryId = itemCategory.Id;
    }

    private async Task OnNewItemCategoryCreatedAsync(string name)
    {
        try
        {
            await apiClient.CreateItemCategoryAsync(name);
        }
        catch (Exception e)
        {
            var fragment = FragmentCreator.CreateAsyncRetryFragment(async () => await OnNewItemCategoryCreatedAsync(name));
            notificationService.NotifyError("Creating item category failed", e.Message, fragment);
            return;
        }
        await State.ItemCategoryCreated();
        StateHasChanged();
    }
}