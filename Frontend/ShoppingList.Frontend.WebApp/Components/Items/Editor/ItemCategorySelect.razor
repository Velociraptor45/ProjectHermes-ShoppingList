@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Items.ItemEditor

@inject IItemEditorApiService apiService;

<div>
    <div class="font-weight-bold">Category</div>
    <SingleSelect
        Class="mt-1 min-w-150"
        TItem="ItemCategory"
        TValue="Guid"
        ValueName="@nameof(ItemCategory.Id)"
        LabelName="@nameof(ItemCategory.Name)"
        DataSource="@State.ItemCategories.ToList()"
        OnItemAdded="@OnNewItemCategoryCreatedAsync"
        OnItemChanged="@OnItemCategoryChanged"
        Placeholder="Item Category"
        DefaultValue="@State.EditedItem.ItemCategoryId.GetValueOrDefault()"
        CanAddItem="true">
    </SingleSelect>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }

    private void OnItemCategoryChanged(ItemCategory itemCategory)
    {
        State.EditedItem.ItemCategoryId = itemCategory.Id;
    }

    private async Task OnNewItemCategoryCreatedAsync(string name)
    {
        await apiService.CreateItemCategoryAsync(name, FragmentCreator, async () =>
        {
            await State.ItemCategoryCreated();
            StateHasChanged();
        });
    }
}