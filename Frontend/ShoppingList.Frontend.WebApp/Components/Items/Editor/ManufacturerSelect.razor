@using ProjectHermes.ShoppingList.Frontend.Models.Manufacturers.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Services.ItemEditor
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Manufacturers.Services
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Error;
@using global::ShoppingList.Frontend.Redux.Manufacturers.States

@inject IItemEditorApiService _itemApiService;
@inject IManufacturerApiService _manufacturerApiService;

@*<div class="ml-3">
    <div class="font-weight-bold">Manufacturer</div>
    <SingleSearchSelect
        Class="mt-1 min-w-150"
        TItem="ManufacturerSearchResult"
        TValue="Guid"
        DataSource="_dataSource"
        ValueName="@nameof(ManufacturerSearchResult.Id)"
        LabelName="@nameof(ManufacturerSearchResult.Name)"
        OnItemAdded="@OnNewManufacturerCreatedAsync"
        OnItemChanged="@OnManufacturerChanged"
        Placeholder="Manufacturer"
        DefaultValue="@State.EditedItem.ManufacturerId.GetValueOrDefault()"
        SearchForItemsAsync="_manufacturerApiService.SearchAsync"
        CanAddItem="true"
        AllowClear="true">
    </SingleSearchSelect>
</div>*@

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }
    
    private List<ManufacturerSearchResult> _dataSource = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (State.EditedItem.ManufacturerId.HasValue)
        {
            var manufacturer = await _manufacturerApiService.GetAsync(State.EditedItem.ManufacturerId.Value);
            if (manufacturer is not null)
                _dataSource.Add(new ManufacturerSearchResult(manufacturer.Id, manufacturer.Name));
        }
    }

    private void OnManufacturerChanged(ManufacturerSearchResult manufacturer)
    {
        State.EditedItem.ManufacturerId = manufacturer?.Id;
    }

    private async Task<(ManufacturerSearchResult, Guid)> OnNewManufacturerCreatedAsync(string name)
    {
        var newManufacturer = await _itemApiService.CreateManufacturerAsync(name, FragmentCreator);

        if (newManufacturer == null)
            return (null, Guid.Empty);

        return (new ManufacturerSearchResult(newManufacturer.Id, newManufacturer.Name), newManufacturer.Id);
    }
}