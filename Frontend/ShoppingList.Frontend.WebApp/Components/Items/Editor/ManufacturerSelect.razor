@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models.Common.Error;

@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.Models.Common.Services.IShoppingListNotificationService notificationService;

<div class="ml-3">
    <div class="font-weight-bold">Manufacturer</div>
    <SingleSelect TItem="Manufacturer"
                  TValue="int"
                  ValueName="@nameof(Manufacturer.Id)"
                  LabelName="@nameof(Manufacturer.Name)"
                  DataSource="@State.Manufacturers.ToList()"
                  OnItemChanged="@OnManfacturerChanged"
                  OnItemAdded="@OnNewManufacturerCreated"
                  Placeholder="Manufacturer"
                  DefaultValue="@State.EditedItem.ManufacturerId.GetValueOrDefault()"
                  CanAddItem="true"
                  AllowClear="true">
    </SingleSelect>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public IAsyncRetryFragmentCreator FragmentCreator { get; set; }

    private void OnManfacturerChanged(Manufacturer manufacturer)
    {
        State.EditedItem.ManufacturerId = manufacturer?.Id;
    }

    private async Task OnNewManufacturerCreated(string name)
    {
        try
        {
            await apiClient.CreateManufacturerAsync(name);
        }
        catch (Exception e)
        {
            var fragment = FragmentCreator.CreateAsyncRetryFragment(async (items) => await OnNewManufacturerCreated((string)items[0]), new[] { name });
            notificationService.NotifyError("Creating manufacturer failed", e.Message, fragment);
            return;
        }

        await State.ManufacturerCreated();
        StateHasChanged();
    }
}