@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Services.Items.ItemEditor

@inject IItemEditorApiService apiService;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@State.EditedItem.Name" />
        </div>
        @if (State.EditedItem.Id != Guid.Empty)
        {
            <Button Danger="true"
                    Class="ml-auto"
                    OnClick="@OnDeleteButtonClickedAsync">
                Delete
            </Button>
        }
    </div>
    <Divider Class="my-3"></Divider>
    <div class="d-flex pb-2">
        <ItemCategorySelect State="@State"
                            FragmentCreator="@ErrorHandler"></ItemCategorySelect>
        <ManufacturerSelect State="@State"
                            FragmentCreator="@ErrorHandler"></ManufacturerSelect>
    </div>
    <Quantity State="@State"></Quantity>
    @if (State.EditedItem.ItemMode == ItemMode.WithoutTypes
        || (!State.EditedItem.ItemTypes.Any() && State.EditedItem.ItemMode == ItemMode.NotDefined))
    {
        <Availabilities State="@State"></Availabilities>
    }
    @if (State.EditedItem.ItemMode == ItemMode.WithTypes
        || (!State.EditedItem.Availabilities.Any() && State.EditedItem.ItemMode == ItemMode.NotDefined))
    {
        <ItemTypes State="State"></ItemTypes>
    }
    <div class="pb-2 pt-4">
        <TextArea Placeholder="Comment" MinRows="2" @bind-Value="@State.EditedItem.Comment"></TextArea>
    </div>
    <div class="d-flex justify-content-end">
        @if (State.EditedItem.Id == Guid.Empty)
        {
            <Button OnClick="@OnCreateButtonClickedAsync">Create</Button>
        }
        else if (State.EditedItem.IsTemporary)
        {
            <Button OnClick="@OnMakePermanentButtonClickedAsync">Make Permanent</Button>
        }
        else
        {
            <Button Disabled="@ShouldDisableChangeButton()" OnClick="@OnUpdateButtonClickedAsync">Update</Button>
            <Button Disabled="@ShouldDisableChangeButton()" Class="ml-2" OnClick="@OnModifyButtonClickedAsync">Modify</Button>
        }
    </div>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public ErrorHandler ErrorHandler { get; set; }

    private async Task OnUpdateButtonClickedAsync()
    {
        if(State.EditedItem.ItemTypes.Any())
        {
            await apiService.UpdateItemWithTypesAsync(State.EditedItem, ErrorHandler, 
                () => State.LeaveEditor());
            return;
        }

        await apiService.UpdateItemAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
    }

    private async Task OnModifyButtonClickedAsync()
    {
        if(State.EditedItem.ItemTypes.Any())
        {
            await apiService.ModifyItemWithTypesAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
            return;
        }

        await apiService.ModifyItemAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
    }

    private async Task OnCreateButtonClickedAsync()
    {
        if (State.EditedItem.ItemTypes.Any())
        {
            await apiService.CreateItemWithTypesAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
            return;
        }

        await apiService.CreateItemAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
    }

    private async Task OnMakePermanentButtonClickedAsync()
    {
        if (!State.EditedItem.ItemCategoryId.HasValue)
            return;

        await apiService.MakeTemporaryItemPermanentAsync(State.EditedItem, ErrorHandler, () => State.LeaveEditor());
    }

    private async Task OnDeleteButtonClickedAsync()
    {
        await apiService.DeleteItemAsync(State.EditedItem.Id, ErrorHandler, () => State.LeaveEditor());
    }

    private bool ShouldDisableChangeButton()
    {
        return State.EditedItem.IsItemWithTypes && !State.EditedItem.ItemTypes.Any();
    }

    private void OnBackButtonClicked()
    {
        State.LeaveEditor();
    }
}