@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items.Models
@using ProjectHermes.ShoppingList.Frontend.Models.Stores.Models

<div class="availability">
    <div class="d-flex">
        <div class="align-items-center d-flex">
            <div class="price-input">
                <Input @bind-Value="@availability.PricePerQuantity"/>
            </div>
            <div class="mr-2">@(State.EditedItem.QuantityType.PriceLabel)</div>
        </div>
        <Button Class="d-flex align-items-center ml-auto"
                OnClick="@OnRemoveStoreButtonClicked"
                Danger="true">
            <Icon Type="minus"></Icon>
        </Button>
    </div>
    <div class="d-flex pt-1">
        <Select Class="mr-2"
                DataSource="State.Stores.ToList()"
                TItem="Store"
                TItemValue="Guid"
                DefaultValue="availability.Store.Id"
                ValueName="@nameof(Store.Id)"
                LabelName="@nameof(Store.Name)"
                OnSelectedItemChanged="@OnStoreChanged">
        </Select>
        <SingleSelect Class=""
                      TItem="ItemSection"
                      TValue="Guid"
                      ValueName="@nameof(ItemSection.Id)"
                      LabelName="@nameof(ItemSection.Name)"
                      DataSource="@availability.Store.Sections.ToList()"
                      OnItemChanged="OnDefaultSectionChanged"
                      DefaultValue="@availability.DefaultSectionId"></SingleSelect>
    </div>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public int ComponentIndex { get; set; }

    private ItemAvailability availability;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        availability = State.EditedItem.Availabilities[ComponentIndex];
    }

    private void OnStoreChanged(Store store)
    {
        availability.Store = store.AsStoreItemStore();

        var defaultSection = store.Sections.Single(s => s.IsDefaultSection);
        availability.ChangeDefaultSectionId(defaultSection.Id.BackendId);
        StateHasChanged();
    }

    private void OnRemoveStoreButtonClicked()
    {
        State.EditedItem.Availabilities.RemoveAt(ComponentIndex);
        State.StateChanged();
    }

    private void OnDefaultSectionChanged(ItemSection section)
    {
        availability.ChangeDefaultSectionId(section.Id);
    }
}