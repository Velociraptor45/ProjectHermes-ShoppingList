@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using global::ShoppingList.Frontend.Redux.Items.Actions
@using global::ShoppingList.Frontend.Redux.Items.Actions.Editor
@using global::ShoppingList.Frontend.Redux.Items.Actions.Editor.Availabilities
@using global::ShoppingList.Frontend.Redux.Items.States

@inject IState<ItemState> State
@inject IDispatcher Dispatcher

@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items.Models
@using ProjectHermes.ShoppingList.Frontend.Models.Stores.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models
@using Microsoft.AspNetCore.Components

<div class="availability d-flex">
    <div class="data">
        <Select Class="mr-2 store"
                DataSource="Available.CreateAvailabilityStores(Model, State.Value.Stores.Stores)"
                TItem="EditedItemAvailabilityStore"
                TItemValue="Guid"
                DefaultValue="Model.StoreId"
                ValueName="@nameof(EditedItemAvailabilityStore.Id)"
                LabelName="@nameof(EditedItemAvailabilityStore.Name)"
                DisabledName="@nameof(EditedItemAvailabilityStore.IsDisabled)"
                IgnoreItemChanges="false"
                OnSelectedItemChanged="@OnStoreChanged">
        </Select>
        <div class="d-flex pt-1">
            <div class="align-items-center d-flex">
                <div class="price-input">
                    <Input TValue="float" Value="@Model.PricePerQuantity" ValueChanged="OnPriceChanged"/>
                </div>
                <div class="mr-2">@(State.Value.Editor.Item.QuantityType.PriceLabel)</div>
            </div>
            @*// todo convert to Select*@
            <SingleSelect Class="ml-2"
                          DataSource="State.Value.Stores.GetSections(Model.StoreId).ToList()"
                          TItem="ItemStoreSection"
                          TValue="Guid"
                          ValueName="@nameof(ItemStoreSection.Id)"
                          LabelName="@nameof(ItemStoreSection.Name)"
                          OnItemChanged="OnDefaultSectionChanged"
                          DefaultValue="@Model.DefaultSectionId"></SingleSelect>
        </div>
    </div>
    <Button Class="d-flex align-items-center ml-auto"
            OnClick="@OnRemoveStoreButtonClicked"
            Danger="true">
        <Icon Type="minus"></Icon>
    </Button>
</div>

@code {
    //[Parameter] public EditedItemsState State { get; set; }
    [Parameter] public IAvailable Available { get; set; }
    [Parameter] public EditedItemAvailability Model { get; set; }
    //[Parameter] public List<EditedItemAvailabilityStore> Stores { get; set; }
    //[Parameter] public int Index { get; set; }
    //[Parameter] public Action<int> OnRemove { get; set; }
    //[Parameter] public Action OnSelectedStoreChanged { get; set; }
    
    private void OnStoreChanged(EditedItemAvailabilityStore store)
    {
        //var store = State.GetStore(availabilityStore.Id);
        //Model.Store = store.AsItemStore();

        //var defaultSection = store.Sections.Single(s => s.IsDefaultSection);
        //Model.ChangeDefaultSectionId(defaultSection.Id.BackendId);
        //OnSelectedStoreChanged?.Invoke();

        Dispatcher.Dispatch(new ChangeStoreAction(Available, Model, store.Id));
    }

    private void OnRemoveStoreButtonClicked()
    {
        //OnRemove(Index);
        Dispatcher.Dispatch(new RemoveStoreAction(Available, Model));
    }

    private void OnDefaultSectionChanged(ItemStoreSection section)
    {
        //Model.ChangeDefaultSectionId(section.Id);
        Dispatcher.Dispatch(new ChangeDefaultSectionAction(Available, Model, section.Id));
    }

    private void OnPriceChanged(float price)
    {
        Dispatcher.Dispatch(new ChangePriceAction(Available, Model, price));
    }
}