@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items.Models
@using ProjectHermes.ShoppingList.Frontend.Models.Stores.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models

<div class="availability d-flex">
    <div class="data">
        <Select Class="mr-2 store"
                DataSource="Stores"
                TItem="AvailabilityStore"
                TItemValue="Guid"
                DefaultValue="Model.Store.Id"
                ValueName="@nameof(AvailabilityStore.Id)"
                LabelName="@nameof(AvailabilityStore.Name)"
                DisabledName="@nameof(AvailabilityStore.IsDisabled)"
                IgnoreItemChanges="false"
                OnSelectedItemChanged="@OnStoreChanged">
        </Select>
        <div class="d-flex pt-1">
            <div class="align-items-center d-flex">
                <div class="price-input">
                    <Input @bind-Value="@Model.PricePerQuantity"/>
                </div>
                <div class="mr-2">@(State.EditedItem.QuantityType.PriceLabel)</div>
            </div>
            <SingleSelect Class="section ml-2"
                          TItem="ItemSection"
                          TValue="Guid"
                          ValueName="@nameof(ItemSection.Id)"
                          LabelName="@nameof(ItemSection.Name)"
                          DataSource="@Model.Store.Sections.ToList()"
                          OnItemChanged="OnDefaultSectionChanged"
                          DefaultValue="@Model.DefaultSectionId"></SingleSelect>
        </div>
    </div>
    <Button Class="d-flex align-items-center ml-auto"
            OnClick="@OnRemoveStoreButtonClicked"
            Danger="true">
        <Icon Type="minus"></Icon>
    </Button>
</div>

@code {
    [Parameter] public ItemsState State { get; set; }
    [Parameter] public ItemAvailability Model { get; set; }
    [Parameter] public List<AvailabilityStore> Stores { get; set; }
    [Parameter] public int Index { get; set; }
    [Parameter] public Action<int> OnRemove { get; set; }
    [Parameter] public Action OnSelectedStoreChanged { get; set; }
    
    private void OnStoreChanged(AvailabilityStore availabilityStore)
    {
        var store = State.GetStore(availabilityStore.Id);
        Model.Store = store.AsItemStore();

        var defaultSection = store.Sections.Single(s => s.IsDefaultSection);
        Model.ChangeDefaultSectionId(defaultSection.Id.BackendId);
        OnSelectedStoreChanged?.Invoke();
    }

    private void OnRemoveStoreButtonClicked()
    {
        OnRemove(Index);
    }

    private void OnDefaultSectionChanged(ItemSection section)
    {
        Model.ChangeDefaultSectionId(section.Id);
    }
}