@page "/Stores"

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Stores;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores.Models;

@inject Services.IStoresApiService apiService;

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Stores

@if (state != null)
{
    <div>
        @if (!state.IsInEditMode)
        {
            <div class="d-flex">
                <div class="h4">Stores</div>
                <Button @onclick="@OnCreateStoreButtonClicked" Class="d-flex align-items-center ml-auto">
                    <Icon Type="plus"></Icon>
                </Button>
            </div>
            <div>
                <ol class="pl-0">
                    @foreach (var store in state.Stores.OrderBy(s => s.Name))
                    {
                        <StoreListItem State="@state" Store="@store"></StoreListItem>
                    }
                </ol>
            </div>
        }
        else
        {
            <StoreEditor State="@state" FragmentCreator="@errorHandler"></StoreEditor>
        }
    </div>
}

@code {
    private StoresState state;
    private ErrorHandler errorHandler;

    protected override async Task OnInitializedAsync()
    {
        errorHandler = new ErrorHandler(GetButtonRenderFragment);
        await CreatePageState();

        await base.OnInitializedAsync();
    }

    private async Task CreatePageState()
    {
        await apiService.LoadStores(errorHandler, stores =>
        {
            state = new StoresState(stores);
            state.StoreChanged += async () => await ReloadStores();
            state.StateChanged += StateHasChanged;

            StateHasChanged();
        });

    }

    private void OnCreateStoreButtonClicked()
    {
        state.EnterEditorForNewStore();
    }

    private async Task ReloadStores()
    {
        await apiService.LoadStores(errorHandler, stores => state.UpdateStores(stores));
    }

    private RenderFragment GetButtonRenderFragment(Func<Task> callback, string label = "Retry")
    {
        return @<Button Type="@ButtonType.Primary" OnClick="async () => await callback()">@label</Button>;
    }
}