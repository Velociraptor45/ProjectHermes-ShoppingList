@page "/items"
@page "/items/{ItemId:int}"

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items;

@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.Models.Common.Services.IShoppingListNotificationService notificationService;

<div>
    @if (!(state?.IsInEditMode ?? false))
    {
        <div class="d-flex">
            <div class="h4">Items</div>
            <Button @onclick="OnCreateItemButtonClicked" Class="d-flex align-items-center ml-auto">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
        <div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Store
                </div>
                <Select Mode="tags"
                        DataSource="@state?.Stores.ToList()"
                        TItem="Store"
                        TItemValue="int"
                        ValueName="@nameof(Store.Id)"
                        LabelName="@nameof(Store.Name)"
                        @ref="@storeSelectRef"></Select>
            </div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Category
                </div>
                <Select Mode="tags"
                        DataSource="@state?.ItemCategories.ToList()"
                        TItem="ItemCategory"
                        TItemValue="int"
                        ValueName="@nameof(ItemCategory.Id)"
                        LabelName="@nameof(ItemCategory.Name)"
                        @ref="@itemCategoriesSelectRef"></Select>
            </div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Manufacturer
                </div>
                <Select Mode="tags"
                        DataSource="@state?.Manufacturers.ToList()"
                        TItem="Manufacturer"
                        TItemValue="int"
                        ValueName="@nameof(Manufacturer.Id)"
                        LabelName="@nameof(Manufacturer.Name)"
                        @ref="@manufacturersSelectRef"></Select>
            </div>
            <Button @onclick="@OnLoadButtonClickedAsync">Load</Button>
        </div>
        <div>
            <!-- result item list -->
            @foreach (var item in state?.Items.ToList() ?? Enumerable.Empty<ItemFilterResult>())
            {
                <FilterResult Item="@item"
                              OnClickCallback="@OnItemClickedAsync"></FilterResult>
            }
        </div>
    }
    else
    {
        <ItemEditor State="@state"
                    ErrorHandler="@errorHandler"></ItemEditor>
    }
</div>

@code {
    [Parameter] public int? ItemId { get; set; }

    private Select<int, Store> storeSelectRef;
    private Select<int, ItemCategory> itemCategoriesSelectRef;
    private Select<int, Manufacturer> manufacturersSelectRef;

    private ItemsState state;
    private ItemsErrorHandler errorHandler;

    protected override async Task OnInitializedAsync()
    {
        errorHandler = new ItemsErrorHandler((func, args, label) => GetButtonRenderFragment(func, args, label));
        await InitialLoad();

        state.ManufacturerCreated += async () => await LoadManufacturerListAsync();
        state.ItemCategoryCreated += async () => await LoadItemCategoryListAsync();

        state.StateChanged += () => StateHasChanged();

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ItemId.HasValue)
        {
            await OnItemClickedAsync(ItemId.Value);
        }

        await base.OnParametersSetAsync();
    }

    private async Task InitialLoad()
    {
        try
        {
            var stores = await apiClient.GetAllActiveStoresAsync();
            var manufacturers = await apiClient.GetAllActiveManufacturersAsync();
            var itemCategories = await apiClient.GetAllActiveItemCategoriesAsync();
            var quantityTypes = await apiClient.GetAllQuantityTypesAsync();
            var quantityTypesInPacket = await apiClient.GetAllQuantityTypesInPacketAsync();

            state = new ItemsState(
                stores,
                itemCategories,
                manufacturers,
                quantityTypes,
                quantityTypesInPacket);
        }
        catch (Exception e)
        {
            var fragment = errorHandler.CreateAsyncRetryFragment(async (items) => await InitialLoad(), new object[0]);
            notificationService.NotifyError("Page loading failed", e.Message, fragment);
            return;
        }
    }

    private async Task OnLoadButtonClickedAsync()
    {
        var stores = storeSelectRef.Values;
        var itemCategories = itemCategoriesSelectRef.Values;
        var manufacturers = manufacturersSelectRef.Values;
        try
        {

            var items = (await apiClient.GetItemFilterResultAsync(
                    stores,
                    itemCategories,
                    manufacturers))
                .ToList();

            state.UpdateItems(items);
        }
        catch (Exception e)
        {
            var fragment = errorHandler.CreateAsyncRetryFragment(async (items) => await OnLoadButtonClickedAsync(), new object[0]);
            notificationService.NotifyError("Item loading failed", e.Message, fragment);
            return;
        }
        StateHasChanged();
    }

    private async Task LoadManufacturerListAsync()
    {
        try
        {
            var manufacturers = (await apiClient.GetAllActiveManufacturersAsync()).ToList();
            state.UpdateManufacturers(manufacturers);
        }
        catch (Exception e)
        {
            var fragment = errorHandler.CreateAsyncRetryFragment(async (items) => await LoadManufacturerListAsync(), new object[0]);
            notificationService.NotifyError("Loading manufacturers failed", e.Message, fragment);
            return;
        }
        StateHasChanged();
    }

    private async Task LoadItemCategoryListAsync()
    {
        try
        {
            var itemCategories = (await apiClient.GetAllActiveItemCategoriesAsync()).ToList();
            state.UpdateItemCategories(itemCategories);
        }
        catch (Exception e)
        {
            var fragment = errorHandler.CreateAsyncRetryFragment(async (items) => await LoadItemCategoryListAsync(), new object[0]);
            notificationService.NotifyError("Loading manufacturers failed", e.Message, fragment);
            return;
        }
        StateHasChanged();
    }

    private async Task OnItemClickedAsync(int itemId)
    {
        try
        {
            var item = await apiClient.GetItemByIdAsync(itemId);
            state.EnterEditor(item);
        }
        catch (Exception e)
        {
            var fragment = errorHandler.CreateAsyncRetryFragment(async (items) => await OnItemClickedAsync((int)items[0]), new object[] { itemId });
            notificationService.NotifyError("Loading item failed", e.Message, fragment);
            return;
        }
    }

    private void OnCreateItemButtonClicked()
    {
        state.EnterEditorForNewItem();
    }

    private RenderFragment GetButtonRenderFragment(Func<object[], Task> callback, object[] args, string label = "Retry")
    {
        return@<Button Type="@ButtonType.Primary" OnClick="async () => await callback(args)">@label</Button>;
}
}