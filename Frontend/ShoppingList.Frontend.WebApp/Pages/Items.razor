@page "/items"
@page "/items/{ItemId:int}"
@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.Models.Common.Services.IShoppingListNotificationService notificationService;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Items;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;

<div>
    @if (currentlyEditedItem == null)
    {
        <div class="d-flex">
            <div class="h4">Items</div>
            <Button @onclick="OnCreateItemButtonClicked" Class="d-flex align-items-center ml-auto">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
        <div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Store
                </div>
                <Select Mode="tags"
                        DataSource="@stores"
                        TItem="Store"
                        TItemValue="int"
                        ValueName="@nameof(Store.Id)"
                        LabelName="@nameof(Store.Name)"
                        @ref="@storeSelectRef"></Select>
            </div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Category
                </div>
                <Select Mode="tags"
                        DataSource="@itemCategories"
                        TItem="ItemCategory"
                        TItemValue="int"
                        ValueName="@nameof(ItemCategory.Id)"
                        LabelName="@nameof(ItemCategory.Name)"
                        @ref="@itemCategoriesSelectRef"></Select>
            </div>
            <div class="d-flex py-1">
                <div class="mr-2 align-self-center">
                    Manufacturer
                </div>
                <Select Mode="tags"
                        DataSource="@manufacturers"
                        TItem="Manufacturer"
                        TItemValue="int"
                        ValueName="@nameof(Manufacturer.Id)"
                        LabelName="@nameof(Manufacturer.Name)"
                        @ref="@manufacturersSelectRef"></Select>
            </div>
            <Button @onclick="@OnLoadButtonClickedAsync">Load</Button>
        </div>
        <div>
            <!-- result item list -->
            @foreach (var item in items)
            {
                <ItemFilterResultComponent Item="@item"
                                           OnClickCallback="@OnItemClickedAsync"></ItemFilterResultComponent>
            }
        </div>
    }
    else
    {
        <ItemEditor State="@state"
                    ErrorHandler="@errorHandler"
                    StoreItem="@currentlyEditedItem"
                    Stores="@stores"
                    Manufacturers="@manufacturers"
                    ItemCategories="@itemCategories"
                    QuantityTypes="@quantityTypes"
                    QuantityTypesInPacket="@quantityTypesInPacket"
                    UpdateItemCallback="@OnItemUpdatedAsync"
                    ModifyItemCallback="@OnItemModifiedAsync"
                    CreateItemCallback="@OnItemCreatedAsync"
                    DeleteItemCallback="@OnItemDeletedAsync"
                    MakeTemporaryItemPermanentCallback="@OnMakeTemporaryItemPermanentAsync"
                    LeaveEditorCallback="@OnLeaveEditor"
                    ManufacturerCreatedCallback="@OnNewManufacturerCreated"
                    ItemCategoryCreatedCallback="@OnNewItemCategoryCreated"></ItemEditor>
    }
</div>

@code {
    [Parameter] public int? ItemId { get; set; }

    private List<Store> stores = new List<Store>();
    private List<ItemCategory> itemCategories = new List<ItemCategory>();
    private List<Manufacturer> manufacturers = new List<Manufacturer>();
    private List<ItemFilterResult> items = new List<ItemFilterResult>();
    private List<QuantityType> quantityTypes = new List<QuantityType>();
    private List<QuantityTypeInPacket> quantityTypesInPacket = new List<QuantityTypeInPacket>();

    private Select<int, Store> storeSelectRef;
    private Select<int, ItemCategory> itemCategoriesSelectRef;
    private Select<int, Manufacturer> manufacturersSelectRef;

    private StoreItem currentlyEditedItem = null;

    private ItemsState state;
    private ItemsErrorHandler errorHandler;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await InitialLoad();

        state.ManufacturerCreated += async () => await LoadManufacturerListAsync();

        errorHandler = new ItemsErrorHandler((func, args, label) => GetButtonRenderFragment(func, args, label));

    }

    //protected async override Task OnInitializedAsync()
    //{
    //    await InitialLoad();

    //    await base.OnInitializedAsync();
    //}

    protected override async Task OnParametersSetAsync()
    {
        if (ItemId.HasValue)
        {
            await OnItemClickedAsync(ItemId.Value);
        }

        await base.OnParametersSetAsync();
    }

    private async Task InitialLoad()
    {
        try
        {
            stores = (await apiClient.GetAllActiveStoresAsync()).ToList();
            manufacturers = (await apiClient.GetAllActiveManufacturersAsync()).ToList();
            itemCategories = (await apiClient.GetAllActiveItemCategoriesAsync()).ToList();
            quantityTypes = (await apiClient.GetAllQuantityTypesAsync()).ToList();
            quantityTypesInPacket = (await apiClient.GetAllQuantityTypesInPacketAsync()).ToList();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Page loading failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await InitialLoad(),
                    new object[0]));
            return;
        }

        state = new ItemsState(
            stores,
            itemCategories,
            manufacturers,
            quantityTypes,
            quantityTypesInPacket);
        StateHasChanged();
    }

    private async Task OnLoadButtonClickedAsync()
    {
        var stores = storeSelectRef.Values;
        var itemCategories = itemCategoriesSelectRef.Values;
        var manufacturers = manufacturersSelectRef.Values;
        try
        {

            items = (await apiClient.GetItemFilterResultAsync(
                    stores,
                    itemCategories,
                    manufacturers))
                .ToList();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Item loading failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnLoadButtonClickedAsync(),
                    new object[0]));
            return;
        }
        StateHasChanged();
    }

    private async Task LoadManufacturerListAsync()
    {
        try
        {
            manufacturers = (await apiClient.GetAllActiveManufacturersAsync()).ToList();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Loading manufacturers failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await LoadManufacturerListAsync(),
                    new object[0]));
            return;
        }
        state.UpdateManufacturers(manufacturers);
        StateHasChanged();
    }

    private async Task OnItemClickedAsync(int itemId)
    {
        try
        {
            currentlyEditedItem = await apiClient.GetItemByIdAsync(itemId);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Loading item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnItemClickedAsync((int)items[0]),
                    new object[] { itemId }));
            return;
        }
    }

    private async Task OnItemUpdatedAsync(StoreItem storeItem)
    {
        var request = new UpdateItemRequest(Guid.NewGuid(), storeItem);
        try
        {
            await apiClient.UpdateItemAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Updating item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnItemUpdatedAsync((StoreItem)items[0]),
                    new object[] { storeItem }));
            return;
        }
        LeaveEditor();
    }

    private async Task OnItemModifiedAsync(StoreItem storeItem)
    {
        var request = new ModifyItemRequest(Guid.NewGuid(), storeItem);
        try
        {
            await apiClient.ModifyItemAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Modifying item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnItemModifiedAsync((StoreItem)items[0]),
                    new object[] { storeItem }));
            return;
        }
        LeaveEditor();
    }

    private async Task OnItemDeletedAsync(int itemId)
    {
        var request = new DeleteItemRequest(Guid.NewGuid(), itemId);
        try
        {
            await apiClient.DeleteItemAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Deleting item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnItemDeletedAsync((int)items[0]),
                    new object[] { itemId }));
            return;
        }
        LeaveEditor();
    }

    private async Task OnItemCreatedAsync(StoreItem storeItem)
    {
        var request = new CreateItemRequest(Guid.NewGuid(), storeItem);
        try
        {
            await apiClient.CreateItemAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Creating item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnItemCreatedAsync((StoreItem)items[0]),
                    new object[] { storeItem }));
            return;
        }
        LeaveEditor();
    }

    private async Task OnMakeTemporaryItemPermanentAsync(StoreItem storeItem)
    {
        var request = new MakeTemporaryItemPermanentRequest(storeItem.Id, storeItem.Name, storeItem.Comment,
            storeItem.QuantityType.Id, storeItem.QuantityInPacket, storeItem.QuantityInPacketType.Id,
            storeItem.ItemCategoryId.Value, storeItem.ManufacturerId, storeItem.Availabilities);
        try
        {
            await apiClient.MakeTemporaryItemPermanent(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Creating item failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnMakeTemporaryItemPermanentAsync((StoreItem)items[0]),
                    new object[] { storeItem }));
            return;
        }
        LeaveEditor();
    }

    private void OnCreateItemButtonClicked()
    {
        // ugly
        currentlyEditedItem =
            new StoreItem(0, "", false, "", false,
                new QuantityType(0, "", 0, "", "", 0), 0,
                new QuantityTypeInPacket(0, "", ""), 1, 1, new List<StoreItemAvailability>());
    }

    private async Task OnNewManufacturerCreated(string name)
    {
        try
        {
            await apiClient.CreateManufacturerAsync(name);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Creating manufacturer failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnNewManufacturerCreated((string)items[0]),
                    new object[] { name }));
            return;
        }
        await LoadManufacturerListAsync();
        StateHasChanged();
    }

    private async Task OnNewItemCategoryCreated(string name)
    {
        try
        {
            await apiClient.CreateItemCategoryAsync(name);
            itemCategories = (await apiClient.GetAllActiveItemCategoriesAsync()).ToList();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Creating item category failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnNewItemCategoryCreated((string)items[0]),
                    new object[] { name }));
            return;
        }
        StateHasChanged();
    }

    private void OnLeaveEditor()
    {
        LeaveEditor();
    }

    private void LeaveEditor()
    {
        currentlyEditedItem = null;
    }

    private RenderFragment GetButtonRenderFragment(Func<object[], Task> callback, object[] args, string label = "Retry")
    {
        return@<Button Type="@ButtonType.Primary" OnClick="async () => await callback(args)">@label</Button>;
}
}