@page "/recipes"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States

@inject IDispatcher Dispatcher
@inject IState<RecipeState> State


@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes

<div>
    <div class="d-flex">
        <div class="h4">Recipes</div>
        <Button @onclick="@OnCreateRecipeButtonClicked" Class="d-flex align-items-center ml-auto">
            <Icon Type="plus"></Icon>
        </Button>
    </div>
    <div>
        <Tabs>
            <TabPane Tab="By Name" Key="1">
                <Input TValue="string" @bind-value="@input"
                       OnPressEnter="@OnLoadByNameButtonClicked"
                       Placeholder="Recipe name ..."></Input>
                <Button @onclick="@OnLoadByNameButtonClicked" Class="mt-2">Load</Button>
            </TabPane>
            <TabPane Tab="By Tags" Key="2">
                <MultiSelect
                    TItem="RecipeTag"
                    TValue="Guid"
                    DataSource="@State.Value.RecipeTags"
                    ValueName="@nameof(RecipeTag.Id)"
                    LabelName="@nameof(RecipeTag.Name)"
                    OnItemsChanged="@OnSelectedRecipeTagsChanged"
                    Placeholder="Tags"
                    Values="@State.Value.Search.SelectedRecipeTagIds"
                    CanAddItem="false">
                </MultiSelect>
                <Button @onclick="@OnLoadByTagsButtonClicked" Class="mt-2">Load</Button>
            </TabPane>
        </Tabs>
    </div>
    <div>
        @foreach (var searchResult in State.Value.Search.SearchResults)
        {
            <SearchResult Model="searchResult" TAction="EditRecipeAction"></SearchResult>
        }
    </div>
</div>

@code {
    private string input = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new EnterRecipeSearchPageAction());
        Dispatcher.Dispatch(new LoadRecipeTagsAction());
    }

    private void OnLoadByNameButtonClicked()
    {
        Dispatcher.Dispatch(new SearchRecipeByNameAction(input));
    }

    private void OnLoadByTagsButtonClicked()
    {
        Dispatcher.Dispatch(new SearchRecipeByTagsAction());
    }

    private void OnCreateRecipeButtonClicked()
    {
        Dispatcher.Dispatch(new EditRecipeAction
        {
            Id = Guid.Empty
        });
    }

    private void OnSelectedRecipeTagsChanged(IEnumerable<RecipeTag> selectedRecipeTags)
    {
        var tagIds = selectedRecipeTags.Select(r => r.Id).ToList();
        Dispatcher.Dispatch(new SelectedSearchRecipeTagIdsChangedAction(tagIds));
    }
}