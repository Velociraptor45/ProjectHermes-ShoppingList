@page "/recipes/{RecipeId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor
@using global::ShoppingList.Frontend.Redux.Recipes.States

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes

@if (State.Value.Editor.Recipe is not null)
{
    <div class="recipe-editor">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                <Icon Type="arrow-left"></Icon>
            </Button>
            <div class="mx-3">
                <Input TValue="string" Value="@State.Value.Editor.Recipe.Name" ValueChanged="OnNameChanged"/>
            </div>
        </div>
        <div class="recipe-editor-main">
            <div class="recipe-editor-content">
                <div id="ingredients" class="pt-4">
                    <div class="d-flex align-items-center mb-3">
                        <h4 class="mb-0 pr-2">Ingredients</h4>
                        <Button class="d-flex align-items-center"
                                Size="@AntSizeLDSType.Small"
                                OnClick="OnAddIngredientButtonClicked">
                            <Icon Type="plus"></Icon>
                        </Button>
                    </div>
                    @foreach (var ingredient in State.Value.Editor.Recipe.Ingredients)
                    {
                    <Ingredient
                        @key="ingredient.Id == default ? Guid.NewGuid() : ingredient.Id"
                        Model="@ingredient"></Ingredient>
                    <hr/>
                    }
                </div>
                @*<div id="preparation-steps" class="pt-4">
                <div class="d-flex align-items-center mb-3">
                    <h4 class="mb-0 pr-2">Steps</h4>
                    <Button class="d-flex align-items-center" 
                            Size="@AntSizeLDSType.Small" 
                            OnClick="OnAddPreparationStepButtonClicked">
                        <Icon Type="plus"></Icon>
                    </Button>
                </div>
                @foreach (var step in State.Value.Editor.Recipe.PreparationSteps)
                {
                    <SortableListItem
                        T="EditedPreparationStep"
                        State="State.Value.Editor.Recipe"
                        Model="step"
                        IsTextArea="true"
                        OnDecrement="OnDecrementPreparationStep"
                        OnIncrement="OnIncrementPreparationStep"
                        OnRemove="OnRemovePreparationStep"></SortableListItem>
                }
            </div>*@
            </div>
            <div class="d-flex justify-content-end mt-2">
                @if (State.Value.Editor.Recipe.Id == Guid.Empty)
                {
                    <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
                }
                else
                {
                    <Button @onclick="@OnModifyButtonClickedAsync">Save</Button>
                }
            </div>

        </div>
    </div>
}

@code {
    [Parameter] public Guid RecipeId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //var ingredientQuantityTypes = await _apiService.GetAllIngredientQuantityTypes();
        //_state.RegisterIngredientQuantityTypes(ingredientQuantityTypes);

        Dispatcher.Dispatch(new LoadIngredientQuantityTypesAction());

        //if (RecipeId == Guid.Empty)
        //{
        //    _state.SetNewEditedRecipe();
        //    return;
        //}

        //var result = await _apiService.GetAsync(RecipeId);
        //if (result is null)
        //    return;

        //_state.SetEditedRecipe(result);

        if(RecipeId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewRecipeAction());
        else
            Dispatcher.Dispatch(new LoadRecipeForEditingAction(RecipeId));
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new RecipeNameChangedAction(name)); // todo implement #298
    }

    private void OnBackButtonClicked()
    {
        //_navigationManager.NavigateTo("recipes");
        Dispatcher.Dispatch(new LeaveRecipeEditorAction());
    }

    private void OnCreateButtonClickedAsync()
    {
        //var newRecipe = await _apiService.CreateAsync(_state.EditedRecipe);
        //if (newRecipe is null)
        //    return;
        //_navigationManager.NavigateTo("recipes");
        Dispatcher.Dispatch(new CreateRecipeAction()); // todo implement #298
    }

    private void OnModifyButtonClickedAsync()
    {
        //var successful = await _apiService.ModifyAsync(_state.EditedRecipe);
        //if (successful)
        //{
        //    _state.UpdateRecipeSearchResultName(_state.EditedRecipe.Id, _state.EditedRecipe.Name);
        //    _navigationManager.NavigateTo("recipes");
        //}
        Dispatcher.Dispatch(new ModifyRecipeAction()); // todo implement #298
    }

    private void OnAddIngredientButtonClicked()
    {
        //_state.EditedRecipe.AddIngredient();
        Dispatcher.Dispatch(new IngredientAddedAction()); // todo implement #298
    }

    private void OnRemoveIngredient(EditedIngredient ingredient)
    {
        //_state.EditedRecipe.RemoveIngredient(ingredient);
        //StateHasChanged();
    }
    
    private void OnAddPreparationStepButtonClicked()
    {
        //_state.EditedRecipe.AddPreparationStep();
        Dispatcher.Dispatch(new PreparationStepAddedAction()); // todo implement #298
    }

    private void OnDecrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new DecrementPreparationStepAction(step));
    }

    private void OnIncrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new IncrementPreparationStepAction(step));
    }

    private void OnRemovePreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new PreparationStepRemovedAction(step));
    }
}