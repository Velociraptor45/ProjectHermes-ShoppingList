@page "/recipes/{RecipeId:guid}"

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes.Models
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes.Services
@using Ingredient = ProjectHermes.ShoppingList.Frontend.Models.Recipes.Models.Ingredient;
@using ProjectHermes.ShoppingList.Frontend.Models.Recipes.Models
@using ProjectHermes.ShoppingList.Frontend.Models.Shared

@inject NavigationManager _navigationManager;
@inject RecipesState _state;
@inject IRecipesApiService _apiService

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes
@if (_state.EditedRecipe is not null)
{
    <div class="recipe-editor">
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                <Icon Type="arrow-left"></Icon>
            </Button>
            <div class="mx-3">
                <Input @bind-Value="@_state.EditedRecipe.Name"/>
            </div>
        </div>
        <div class="recipe-editor-main">
            <div class="recipe-editor-content">
                <div id="ingredients" class="pt-4">
                    <div class="d-flex align-items-center mb-3">
                        <h4 class="mb-0 pr-2">Ingredients</h4>
                        <Button class="d-flex align-items-center" 
                                Size="@AntSizeLDSType.Small" 
                                OnClick="OnAddIngredientButtonClicked">
                            <Icon Type="plus"></Icon>
                        </Button>
                    </div>
                    @foreach (var ingredient in _state.EditedRecipe.Ingredients)
                    {
                        <Ingredient
                            @key="ingredient.Id == default ? Guid.NewGuid() : ingredient.Id"
                            Model="@ingredient"
                            OnRemove="OnRemoveIngredient"></Ingredient>
                        <hr/>
                    }
                </div>
                <div id="preparation-steps" class="pt-4">
                    <div class="d-flex align-items-center mb-3">
                        <h4 class="mb-0 pr-2">Steps</h4>
                        <Button class="d-flex align-items-center" 
                                Size="@AntSizeLDSType.Small" 
                                OnClick="OnAddPreparationStepButtonClicked">
                            <Icon Type="plus"></Icon>
                        </Button>
                    </div>
                    @foreach (var step in _state.EditedRecipe.PreparationSteps)
                    {
                        <SortableListItem
                            T="PreparationStep"
                            State="_state.EditedRecipe"
                            Model="step"
                            IsTextArea="true"
                            OnChanged="() => StateHasChanged()"></SortableListItem>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-end mt-2">
                @if (_state.EditedRecipe.Id == Guid.Empty)
                {
                    <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
                }
                else
                {
                    <Button @onclick="@OnModifyButtonClickedAsync">Save</Button>
                }
            </div>

        </div>
    </div>
}

@code {
    [Parameter] public Guid RecipeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var ingredientQuantityTypes = await _apiService.GetAllIngredientQuantityTypes();
        _state.RegisterIngredientQuantityTypes(ingredientQuantityTypes);

        if (RecipeId == Guid.Empty)
        {
            _state.SetNewEditedRecipe();
            return;
        }

        var result = await _apiService.GetAsync(RecipeId);
        if (result is null)
            return;

        _state.SetEditedRecipe(result);
    }

    private void OnBackButtonClicked()
    {
        _navigationManager.NavigateTo("recipes");
    }

    private async Task OnCreateButtonClickedAsync()
    {
        var newRecipe = await _apiService.CreateAsync(_state.EditedRecipe);
        if (newRecipe is null)
            return;
        _navigationManager.NavigateTo($"recipes/{newRecipe.Id}");
    }

    private async Task OnModifyButtonClickedAsync()
    {
        var successful = await _apiService.ModifyAsync(_state.EditedRecipe);
        if (successful)
        {
            _state.UpdateRecipeSearchResultName(_state.EditedRecipe.Id, _state.EditedRecipe.Name);
            _navigationManager.NavigateTo("recipes");
        }
    }

    private void OnAddIngredientButtonClicked()
    {
        _state.EditedRecipe.AddIngredient();
    }

    private void OnRemoveIngredient(Ingredient ingredient)
    {
        _state.EditedRecipe.RemoveIngredient(ingredient);
        StateHasChanged();
    }
    
    private void OnAddPreparationStepButtonClicked()
    {
        _state.EditedRecipe.AddPreparationStep();
    }
}