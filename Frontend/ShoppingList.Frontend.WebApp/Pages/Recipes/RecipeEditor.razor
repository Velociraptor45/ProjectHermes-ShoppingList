@page "/recipes/{RecipeId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.PreparationSteps

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes

<div class="recipe-editor">
    @if (State.Value.Editor.Recipe is not null)
    {
        @if (State.Value.Editor.IsInEditMode)
        {
            <div class="d-flex">
                <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                    <Icon Type="arrow-left"></Icon>
                </Button>
                <div class="mx-3">
                    <Input TValue="string" Value="@State.Value.Editor.Recipe.Name" ValueChanged="OnNameChanged"/>
                </div>
                <Button Class="d-flex ml-auto align-items-center" OnClick="@OnToggleEditModeButtonClicked">
                    <Icon Type="edit"></Icon>
                </Button>
            </div>
            <div class="recipe-editor-main">
                <div class="recipe-editor-content">
                    <div class="pt-4 ingredients">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Ingredients</h4>
                            <Button class="d-flex align-items-center"
                                    Size="@AntSizeLDSType.Small"
                                    OnClick="OnAddIngredientButtonClicked">
                                <Icon Type="plus"></Icon>
                            </Button>
                        </div>
                        @foreach (var ingredient in State.Value.Editor.Recipe.Ingredients)
                        {
                            <Ingredient Model="@ingredient"></Ingredient>
                        }
                    </div>
                    <div class="pt-4 preparation-steps">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Steps</h4>
                            <Button class="d-flex align-items-center"
                                    Size="@AntSizeLDSType.Small"
                                    OnClick="OnAddPreparationStepButtonClicked">
                                <Icon Type="plus"></Icon>
                            </Button>
                        </div>
                        @foreach (var step in State.Value.Editor.Recipe.PreparationSteps)
                        {
                            <SortableListItem
                                T="EditedPreparationStep"
                                State="State.Value.Editor.Recipe"
                                Model="step"
                                IsTextArea="true"
                                OnDecrement="OnDecrementPreparationStep"
                                OnIncrement="OnIncrementPreparationStep"
                                OnRemove="OnRemovePreparationStep"
                                OnTextChanged="OnPreparationStepTextChanged"></SortableListItem>
                        }
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-2">
                    @if (State.Value.Editor.Recipe.Id == Guid.Empty)
                    {
                        <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
                    }
                    else
                    {
                        <Button @onclick="@OnModifyButtonClickedAsync">Save</Button>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="d-flex">
                <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                    <Icon Type="arrow-left"></Icon>
                </Button>
                <div class="mx-3">
                    @State.Value.Editor.Recipe.Name
                </div>
                <Button Class="d-flex ml-auto align-items-center" OnClick="@OnToggleEditModeButtonClicked">
                    <Icon Type="edit"></Icon>
                </Button>
            </div>
            <div class="recipe-editor-view-main">
                <div class="recipe-editor-view-content">
                    <div class="pt-4 ingredients">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Ingredients</h4>
                        </div>
                        @foreach (var ingredient in State.Value.Editor.Recipe.Ingredients)
                        {
                            <Ingredient Model="@ingredient"></Ingredient>
                            <hr />
                        }
                    </div>
                    <div class="pt-4 preparation-steps">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Steps</h4>
                        </div>
                        @foreach (var step in State.Value.Editor.Recipe.PreparationSteps)
                        {
                            <div>@step.Name</div>
                            <hr />
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public Guid RecipeId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Dispatcher.Dispatch(new LoadIngredientQuantityTypesAction());

        if(RecipeId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewRecipeAction());
        else
            Dispatcher.Dispatch(new LoadRecipeForEditingAction(RecipeId));
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new RecipeNameChangedAction(name));
    }

    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveRecipeEditorAction());
    }

    private void OnToggleEditModeButtonClicked()
    {
        Dispatcher.Dispatch(new ToggleEditModeAction());
    }

    private void OnCreateButtonClickedAsync()
    {
        Dispatcher.Dispatch(new CreateRecipeAction());
    }

    private void OnModifyButtonClickedAsync()
    {
        Dispatcher.Dispatch(new ModifyRecipeAction());
    }

    private void OnAddIngredientButtonClicked()
    {
        Dispatcher.Dispatch(new IngredientAddedAction());
    }
    
    private void OnAddPreparationStepButtonClicked()
    {
        Dispatcher.Dispatch(new PreparationStepAddedAction());
    }

    private void OnDecrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new DecrementPreparationStepAction(step));
    }

    private void OnIncrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new IncrementPreparationStepAction(step));
    }

    private void OnRemovePreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new PreparationStepRemovedAction(step));
    }

    private void OnPreparationStepTextChanged(EditedPreparationStep step, string text)
    {
        Dispatcher.Dispatch(new PreparationStepTextChangedAction(step.Key, text));
    }
}