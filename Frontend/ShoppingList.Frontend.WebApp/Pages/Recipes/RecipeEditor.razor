@page "/recipes/{RecipeId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.AddToShoppingListModal
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.States
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Recipes.Editor
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.Ingredients
@using ProjectHermes.ShoppingList.Frontend.Redux.Recipes.Actions.Editor.PreparationSteps

@inject IState<RecipeState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Recipes

<div class="recipe-editor px-2 pt-2">
    @if (State.Value.Editor.Recipe is not null)
    {
        @if (State.Value.Editor.IsInEditMode)
        {
            <div class="d-flex top-row-parent">
                <Button Class="top-row d-flex align-items-center" OnClick="@OnBackButtonClicked">
                    <Icon Type="arrow-left"></Icon>
                </Button>
                <div class="mx-3 top-row">
                    <Input TValue="string" Value="@State.Value.Editor.Recipe.Name" ValueChanged="OnNameChanged"/>
                </div>
                <div class="top-row">
                    <MultiSelect
                        Class="min-w-100"
                        TItem="RecipeTag"
                        TValue="Guid"
                        DataSource="@State.Value.RecipeTags"
                        ValueName="@nameof(RecipeTag.Id)"
                        LabelName="@nameof(RecipeTag.Name)"
                        OnItemsChanged="@OnRecipeTagsChanged"
                        OnItemAdded="@OnRecipeTagCreated"
                        OnInputChanged="OnRecipeTagInputChanged"
                        Placeholder="Tags"
                        Values="@State.Value.Editor.Recipe.RecipeTagIds"
                        SearchInput="@State.Value.Editor.RecipeTagCreateInput"
                        OnDropdownClosed="OnRecipeTagsDropdownClosed"
                        CanAddItem="true">
                    </MultiSelect>
                </div>
                <div class="top-row top-row-number-of-servings">
                    <AntDesign.InputNumber Value="@State.Value.Editor.Recipe.NumberOfServings"
                                           TValue="int"
                                           Step="1"
                                           Min="1"
                                           OnChange="OnNumberOfServingsChanged"></AntDesign.InputNumber>
                    <span>People</span>
                </div>
                <Button Class="top-row d-flex ml-auto align-items-center" OnClick="@OnToggleEditModeButtonClicked">
                    <Icon Type="edit"></Icon>
                </Button>
            </div>
            <div class="main">
                <div class="content">
                    <div class="pt-4 ingredients">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Ingredients</h4>
                            <Button class="d-flex align-items-center"
                                    Size="@AntSizeLDSType.Small"
                                    OnClick="OnAddIngredientButtonClicked">
                                <Icon Type="plus"></Icon>
                            </Button>
                        </div>
                        @foreach (var ingredient in State.Value.Editor.Recipe.Ingredients)
                        {
                            <Ingredient Model="@ingredient"></Ingredient>
                        }
                    </div>
                    <div class="pt-4 preparation-steps">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Steps</h4>
                            <Button class="d-flex align-items-center"
                                    Size="@AntSizeLDSType.Small"
                                    OnClick="OnAddPreparationStepButtonClicked">
                                <Icon Type="plus"></Icon>
                            </Button>
                        </div>
                        @foreach (var step in State.Value.Editor.Recipe.PreparationSteps)
                        {
                            <SortableListItem
                                T="EditedPreparationStep"
                                State="State.Value.Editor.Recipe"
                                Model="step"
                                IsTextArea="true"
                                OnDecrement="OnDecrementPreparationStep"
                                OnIncrement="OnIncrementPreparationStep"
                                OnRemove="OnRemovePreparationStep"
                                OnTextChanged="OnPreparationStepTextChanged"></SortableListItem>
                        }
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-2">
                    @if (State.Value.Editor.Recipe.Id == Guid.Empty)
                    {
                        <Button @onclick="@OnCreateButtonClickedAsync">Create</Button>
                    }
                    else
                    {
                        <Button @onclick="@OnModifyButtonClickedAsync">Save</Button>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="d-flex top-row-parent">
                <Button Class="top-row d-flex align-items-center" OnClick="@OnBackButtonClicked">
                    <Icon Type="arrow-left"></Icon>
                </Button>
                <div class="mx-3 view-name top-row">
                    @State.Value.Editor.Recipe.Name
                </div>
                <div class="align-self-center top-row">
                    @foreach (var tag in State.Value.GetTagNamesFor(State.Value.Editor.Recipe.RecipeTagIds))
                    {
                        <span class="view-tag">@tag</span>
                    }
                </div>
                <div class="align-self-center top-row top-row-number-of-servings">
                    <span>@State.Value.Editor.Recipe.NumberOfServings</span>
                    <span>@(State.Value.Editor.Recipe.NumberOfServings == 1 ? "Person" : "People")</span>
                </div>
                <div class="top-row d-flex ml-auto">
                    <Button Class="d-flex align-items-center mr-2"
                            OnClick="OnAddToShoppingListButtonClicked">
                        <Icon Type="shopping-cart" Theme="outline" />
                    </Button>
                    <Button Class="top-row d-flex align-items-center" OnClick="@OnToggleEditModeButtonClicked">
                        <Icon Type="edit"></Icon>
                    </Button>
                </div>
            </div>
            <div class="view-main">
                <div class="view-content">
                    <div class="pt-4 ingredients">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Ingredients</h4>
                        </div>
                        @foreach (var ingredient in State.Value.Editor.Recipe.Ingredients)
                        {
                            <Ingredient Model="@ingredient"></Ingredient>
                            <hr />
                        }
                    </div>
                    <div class="pt-4 preparation-steps">
                        <div class="d-flex align-items-center mb-3">
                            <h4 class="mb-0 pr-2">Steps</h4>
                        </div>
                        @foreach (var step in State.Value.Editor.Recipe.PreparationSteps)
                        {
                            <div>@step.Name</div>
                            <hr />
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
<AddToShoppingListModal></AddToShoppingListModal>

@code {
    [Parameter] public Guid RecipeId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Dispatcher.Dispatch(new LoadIngredientQuantityTypesAction());
        Dispatcher.Dispatch(new LoadRecipeTagsAction());

        if(RecipeId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewRecipeAction());
        else
            Dispatcher.Dispatch(new LoadRecipeForEditingAction(RecipeId));
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new RecipeNameChangedAction(name));
    }

    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveRecipeEditorAction());
    }

    private void OnToggleEditModeButtonClicked()
    {
        Dispatcher.Dispatch(new ToggleEditModeAction());
    }

    private void OnCreateButtonClickedAsync()
    {
        Dispatcher.Dispatch(new CreateRecipeAction());
    }

    private void OnModifyButtonClickedAsync()
    {
        Dispatcher.Dispatch(new ModifyRecipeAction());
    }

    private void OnAddIngredientButtonClicked()
    {
        Dispatcher.Dispatch(new IngredientAddedAction());
    }

    private void OnAddPreparationStepButtonClicked()
    {
        Dispatcher.Dispatch(new PreparationStepAddedAction());
    }

    private void OnDecrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new DecrementPreparationStepAction(step));
    }

    private void OnIncrementPreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new IncrementPreparationStepAction(step));
    }

    private void OnRemovePreparationStep(EditedPreparationStep step)
    {
        Dispatcher.Dispatch(new PreparationStepRemovedAction(step));
    }

    private void OnPreparationStepTextChanged(EditedPreparationStep step, string text)
    {
        Dispatcher.Dispatch(new PreparationStepTextChangedAction(step.Key, text));
    }

    private void OnRecipeTagsChanged(IEnumerable<RecipeTag> tags)
    {
        Dispatcher.Dispatch(new RecipeTagsChangedAction(tags.Select(t => t.Id).ToList()));
    }

    private void OnRecipeTagCreated()
    {
        Dispatcher.Dispatch(new CreateNewRecipeTagAction());
    }

    private void OnRecipeTagInputChanged(string input)
    {
        Dispatcher.Dispatch(new RecipeTagInputChangedAction(input));
    }

    private void OnRecipeTagsDropdownClosed()
    {
        Dispatcher.Dispatch(new RecipeTagsDropdownClosedAction());
    }

    private void OnNumberOfServingsChanged(int servings)
    {
        Dispatcher.Dispatch(new RecipeNumberOfServingsChangedAction(servings));
    }

    private void OnAddToShoppingListButtonClicked()
    {
        Dispatcher.Dispatch(new LoadAddToShoppingListAction());
    }
}