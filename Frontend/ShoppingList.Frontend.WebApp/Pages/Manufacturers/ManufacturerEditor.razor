@page "/manufacturers/{ManufacturerId:guid}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using global::ShoppingList.Frontend.Redux.Manufacturers.Actions
@using global::ShoppingList.Frontend.Redux.Manufacturers.States

@inject IState<ManufacturerState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Manufacturers

@if (State.Value.Editor?.Manufacturer is not null)
{
    <div>
        <div class="d-flex">
            <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClicked">
                <Icon Type="arrow-left"></Icon>
            </Button>
            <div class="mx-3">
                <Input TValue="string" Value="@State.Value.Editor.Manufacturer.Name" OnChange="OnNameChanged"/>
            </div>
            @if (State.Value.Editor.Manufacturer.Id != Guid.Empty)
            {
                <Button Danger="true"
                        Class="ml-auto"
                        OnClick="@OnDeleteButtonClicked">
                    Delete
                </Button>
            }
        </div>
        <div class="d-flex justify-content-end mt-2">

            @if (State.Value.Editor.Manufacturer.Id == Guid.Empty)
            {
                <Button @onclick="@OnSaveButtonClicked">Create</Button>
            }
            else
            {
                <Button @onclick="@OnSaveButtonClicked">Save</Button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Guid ManufacturerId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (ManufacturerId == Guid.Empty)
            Dispatcher.Dispatch(new SetNewManufacturerAction());
        else
            Dispatcher.Dispatch(new LoadManufacturerForEditingAction(ManufacturerId));

        await base.OnInitializedAsync();
    }

    private void OnNameChanged(string name)
    {
        Dispatcher.Dispatch(new EditedManufacturerNameChangedAction(name));
    }

    private void OnBackButtonClicked()
    {
        Dispatcher.Dispatch(new LeaveManufacturerEditorAction());
    }

    private void OnSaveButtonClicked()
    {
        Dispatcher.Dispatch(new SaveManufacturerAction());
    }

    private void OnDeleteButtonClicked()
    {
        Dispatcher.Dispatch(new DeleteManufacturerAction());
    }
}