@page "/items"
@page "/items/{ItemId:guid}"

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items.Filter;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items.Editor;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Services

@inject IItemsApiService loadingService;

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items

@if (state != null)
{
    <div>
        @if (!state.IsInEditMode)
        {
            <ItemFilter State="@state" FragmentCreator="@errorHandler"></ItemFilter>
        }
        else
        {
            <ItemEditor State="@state" ErrorHandler="@errorHandler"></ItemEditor>
        }
    </div>
}

@code {
    [Parameter] public Guid? ItemId { get; set; }

    private ItemsState state;
    private ErrorHandler errorHandler;

    protected override async Task OnInitializedAsync()
    {
        errorHandler = new ErrorHandler(GetButtonRenderFragment);
        await InitialLoadAsync();

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ItemId.HasValue)
        {
            await OnItemClickedAsync(ItemId.Value);
        }

        await base.OnParametersSetAsync();
    }

    private async Task InitialLoadAsync()
    {
        await loadingService.LoadInitialPageStateAsync(errorHandler, itemsState =>
        {
            state = itemsState;
            SetupState();
        });
    }

    private void SetupState()
    {
        state.ManufacturerCreated += async () => await LoadManufacturerListAsync();
        state.ItemCategoryCreated += async () => await LoadItemCategoryListAsync();

        state.StateChanged += StateHasChanged;
    }

    private async Task LoadManufacturerListAsync()
    {
        await loadingService.LoadManufacturersAsync(errorHandler, 
            manufacturers => state.UpdateManufacturers(manufacturers));
    }

    private async Task LoadItemCategoryListAsync()
    {
        await loadingService.LoadItemCategoriesAsync(errorHandler, 
            itemCategories => state.UpdateItemCategories(itemCategories));
    }

    private async Task OnItemClickedAsync(Guid itemId)
    {
        await loadingService.LoadItemAsync(itemId, errorHandler, item => state.EnterEditor(item));
    }

    private RenderFragment GetButtonRenderFragment(Func<Task> callback, string label = "Retry")
    {
        return @<Button Type="@ButtonType.Primary" OnClick="async () => await callback()">@label</Button>;
    }
}