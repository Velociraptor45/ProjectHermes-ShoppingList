@page "/items"

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Items.Filter;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items.Services

@inject IItemsApiService LoadingService;
@inject ItemsState State

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Items

@if (State != null)
{
    <div>
        <ItemFilter State="@State" FragmentCreator="@errorHandler"></ItemFilter>
    </div>
}

@code {
    private ErrorHandler errorHandler;

    protected override async Task OnInitializedAsync()
    {
        errorHandler = new ErrorHandler(GetButtonRenderFragment);
        await InitialLoadAsync();
        State.ClearItems();
        State.StateChanged -= StateHasChanged;
        State.StateChanged += StateHasChanged;
    }

    private async Task InitialLoadAsync()
    {
        if (State.Stores.Any())
            return;

        await LoadingService.LoadInitialPageStateAsync(State, errorHandler);
    }

    private RenderFragment GetButtonRenderFragment(Func<Task> callback, string label = "Retry")
    {
        return @<Button Type="@ButtonType.Primary" OnClick="async () => await callback()">@label</Button>;
    }
}