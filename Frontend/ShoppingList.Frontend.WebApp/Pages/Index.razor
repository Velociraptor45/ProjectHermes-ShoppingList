@page "/"
@inject ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ShoppingList.Frontend.Infrastructure.Connection.ICommandQueue commandQueue;
@using ShoppingList.Frontend.WebApp.Components.Index;
@using ShoppingList.Frontend.Models;
@using ShoppingList.Frontend.Models.Index;
@using ShoppingList.Frontend.Models.Index.Search;
@using ShoppingList.Frontend.Models.Shared.Requests;
@using OneOf;
@using ShoppingList.Frontend.Models.Shared;

<div>
    <div class="mb-1 d-flex justify-content-end align-items-center">
        <Select SelectedValues=@availableStores?.SelectedStore?.Name
                Class="mr-1 min-w-100"
                OnChange="@OnSelectedStoreChanged">
            @foreach (var store in availableStores.Stores)
            {
                <SelectOption Value=@store.Id.ToString() Class="min-w-100">@store.Name</SelectOption>
            }
        </Select>
        <Button Class="mr-1 d-flex align-items-center"
                OnClick="@OnShowBasketItemsChangeButtonClicked"
                Disabled="@(!shoppingList?.AnyItemInBasket ?? true)">
            @if (showItemsInBasket)
            {
                <Icon Type="eye" />
            }
            else
            {
                <Icon Type="eye-invisible" />
            }
        </Button>
        <Button class="mr-1 d-flex align-items-center" OnClick="@OnEditModeButtonClicked"
                Disabled="@(shoppingList.Store == null)">
            <Icon Type="edit" />
        </Button>
    </div>
    <!--search bar-->
    <div class="mb-2 d-flex">
        <Select @ref="@searchSelect"
                OnFocus="OnSearchBarFocusIn"
                Class="@(searchBar.Active ? "ml-1 mr-2 w-100 cursor-text" : "mx-1 w-100 cursor-text")"
                OnSearch="@OnSearchBarInput"
                ShowSearch="true"
                AllowClear="true"
                AutoClearSearchValue="true"
                OnChange="@OnSearchItemSelected">
            @foreach (var option in searchBar.Options)
            {
                <SelectOption Value="@option.ItemId.ToString()">
                    @option.Name | @option.ManufacturerName | @option.Price@option.PriceLabel
                </SelectOption>
            }
        </Select>

        @if (searchBar.Active)
        {
            <Button Type="primary" OnClick="@OnCreateNewTemporaryItem">
                <Icon Type="plus"></Icon>
            </Button>
            <Button Class="mr-1" OnClick="@OnSearchBarCancleButtonClicked">Cancle</Button>
        }
    </div>
    @foreach (var item in shoppingList.Items.Where(item => showItemsInBasket || !item.IsInBasket))
    {
        <ShoppingListItemComponent Item="@item"
                                   ItemBasketStatusChangedCallback="@OnItemBasketStatusChangedAsync"
                                   ItemQuantityChangedCallback="@OnItemQuantityChangedAsync"
                                   ItemRemovedCallback="@OnItemRemovedFromListAsync"
                                   IsInEditMode="@isInEditMode"></ShoppingListItemComponent>
    }
    <div class="d-flex justify-content-end">
        <Button Type="primary"
                OnClick="@OnFinishListButtonClicked"
                Class="mr-2"
                Disabled="@(!shoppingList?.AnyItemInBasket ?? true)">
            Finish List
        </Button>
    </div>
</div>

@code{
    private ShoppingListRoot shoppingList = new ShoppingListRoot(0, null, null, Enumerable.Empty<ShoppingListItem>());
    private AvailableStores availableStores = new AvailableStores(Enumerable.Empty<Store>());

    private SearchBar searchBar = new SearchBar();
    private Select searchSelect;

    private bool isInEditMode = false;
    private bool showItemsInBasket = true;

    List<ShoppingListItem> items = new List<ShoppingListItem>();

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(4000);
        await base.OnInitializedAsync();
        await LoadAvailableStoresAsync();
        Console.WriteLine($"{availableStores.Stores.Count} stores loaded");
        commandQueue.Initialize(OnConnectionFailed, OnQueueProcessed);
        StateHasChanged();
    }

    private void ResetEditMode()
    {
        isInEditMode = false;
    }

    #region Loading
    private async Task LoadAvailableStoresAsync()
    {
        List<Store> stores;
        try
        {
            stores = (await apiClient.GetAllActiveStoresAsync())
                .ToList();
        }
        catch (Exception)
        {
            //todo show retry message
            return;
        }

        availableStores = new AvailableStores(stores);
    }

    private async Task LoadShoppingListAsync()
    {
        try
        {
            shoppingList = await apiClient.GetActiveShoppingListByStoreIdAsync(availableStores.SelectedStore.Id);
            Console.WriteLine($"Loaded shopping list with {shoppingList.Items.Count} items");
        }
        catch (Exception e)
        {
            Console.WriteLine("Loading failed");
            Console.WriteLine(e.Message);
            //todo show retry message
            return;
        }
        StateHasChanged();
    }
    #endregion

    #region Callbacks
    private void OnCreateNewTemporaryItem()
    {
        var quantityType = new QuantityType(0, "", 1, "€");
        var quantityTypeInPacket = new QuantityInPacketType(0, "", "");
        var item = new ShoppingListItem(new ItemId(Guid.NewGuid()), searchBar.Input, true, 1f, quantityType, 1,
            quantityTypeInPacket, "", "", false, 1);

        var createRequest = new CreateTemporaryItemRequest(Guid.NewGuid(), item.Id.OfflineId.Value, item.Name, shoppingList.Store.Id, item.PricePerQuantity);
        var addRequest = new AddItemToShoppingListRequest(Guid.NewGuid(), shoppingList.Id, item.Id, item.Quantity);
        commandQueue.Enqueue(createRequest);
        commandQueue.Enqueue(addRequest);

        shoppingList.Items.Add(item);
        StateHasChanged();
    }

    private Task OnConnectionFailed()
    {
        Console.WriteLine("Connection failed");
        return Task.CompletedTask;
    }

    private async Task OnQueueProcessed()
    {
        Console.WriteLine("Queue processed");
        await LoadShoppingListAsync();
    }

    private async void OnSelectedStoreChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        int storeId = int.Parse(value.AsT0);
        availableStores.SetSelectedStore(storeId);
        ResetEditMode();
        await LoadShoppingListAsync();
    }

    private void OnEditModeButtonClicked()
    {
        isInEditMode = !isInEditMode;
        StateHasChanged();
    }

    private void OnShowBasketItemsChangeButtonClicked()
    {
        showItemsInBasket = !showItemsInBasket;
        StateHasChanged();
    }

    private void OnSearchBarFocusIn()
    {
        searchBar.Active = true;
        StateHasChanged();
    }

    private void OnSearchBarCancleButtonClicked()
    {
        searchBar.Active = false;
        StateHasChanged();
    }

    private async void OnSearchBarInput(string searchInput)
    {
        if (shoppingList.Store == null)
            return;

        if (string.IsNullOrWhiteSpace(searchInput))
        {
            searchBar.Options = Enumerable.Empty<ItemSearchResult>();
            return;
        }

        searchInput = searchInput.Trim();
        searchBar.Input = searchInput;

        try
        {
            var result = await apiClient.GetItemSearchResultsAsync(searchInput, shoppingList.Store.Id);
            searchBar.Options = result;
        }
        catch (Exception)
        {
            //todo show retry message
        }
        StateHasChanged();
    }

    private async void OnSearchItemSelected(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        if (value.AsT0 == null)
            return;

        var itemId = int.Parse(value.AsT0);
        var request = new AddItemToShoppingListRequest(Guid.NewGuid(), shoppingList.Id, new ItemId(itemId), 1); //todo default item quantity
        try
        {
            await apiClient.AddItemToShoppingListAsync(request);
        }
        catch (Exception)
        {
            //todo show retry message
        }

        searchBar.ResetInput();
        searchBar.ResetOptions();
        await searchSelect.ClearAll();

        await LoadShoppingListAsync();
        StateHasChanged();
    }

    private async Task OnItemBasketStatusChangedAsync(ShoppingListItem item)
    {
        if (item.IsInBasket)
        {
            item.RemoveFromBasket();
            var request = new RemoveItemFromBasketRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
            await commandQueue.Enqueue(request);
        }
        else
        {
            item.PutInBasket();
            var request = new PutItemInBasketRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
            await commandQueue.Enqueue(request);
        }
    }

    private async Task OnItemRemovedFromListAsync(ShoppingListItem item)
    {
        var request = new RemoveItemFromShoppingListRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
        await commandQueue.Enqueue(request);
    }

    private async Task OnItemQuantityChangedAsync(ShoppingListItem item)
    {
        var request = new ChangeItemQuantityOnShoppingListRequest(Guid.NewGuid(), shoppingList.Id, item.Id,
            item.Quantity);
        await commandQueue.Enqueue(request);
    }

    private async void OnFinishListButtonClicked()
    {
        var requst = new FinishListRequest(Guid.NewGuid(), shoppingList.Id);
        await commandQueue.Enqueue(requst);
    }
    #endregion
}