@page "/"
@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.ICommandQueue commandQueue;
@inject Models.Common.Services.IShoppingListNotificationService notificationService;
@inject ProjectHermes.ShoppingList.Frontend.WebApp.Services.IItemPriceCalculationService itemPriceCalculationService;
@inject IWebAssemblyHostEnvironment Env;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Index;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Common
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.Models.Index;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;

<div>
    @if (errorReceiver.ApiHasProcessingError)
    {
        <ProcessingError ReloadCallback="@ReloadAfterProcessingErrorAsync"></ProcessingError>
    }
    <div class="mb-1 d-flex justify-content-end align-items-center">
        <div class="pr-2">
            <Switch Checked="@errorReceiver.IsDebug" CheckedChildren="Dbg" UnCheckedChildren="Dbg" OnChange="() => errorReceiver.ToggleDebugState()" />
        </div>
        <StoreSelect Page="@state" ErrorReceiver="@errorReceiver"></StoreSelect>
        <Button Class="mr-1 d-flex align-items-center"
                OnClick="@OnShowBasketItemsChangeButtonClicked"
                Disabled="@(!shoppingList?.AnyItemInBasket ?? true)">
            @if (showItemsInBasket)
            {
                <Icon Type="eye" />
            }
            else
            {
                <Icon Type="eye-invisible" />
            }
        </Button>
        <Button class="mr-1 d-flex align-items-center" OnClick="@OnEditModeButtonClicked"
                Disabled="@(shoppingList.Store == null)">
            <Icon Type="edit" />
        </Button>
    </div>
    <!--search bar-->
    <ItemSearchBar ReloadShoppingListAsync="@ReloadShoppingListAsync"
                   ErrorReceiver="@errorReceiver"
                   Page="@state"></ItemSearchBar>
    <div>
        @foreach (var section in shoppingList.Sections.Where(s => s.Items.Any()))
        {
            <Section Model="@section"
                     ShowItemsInBasket="@showItemsInBasket"
                     ItemBasketStatusChangedCallback="@OnItemBasketStatusChangedAsync"
                     ItemQuantityChangedCallback="@OnItemQuantityChangedAsync"
                     ItemRemovedCallback="@OnItemRemovedFromListAsync"
                     IsInEditMode="@isInEditMode"
                     ItemPriceCalculationService="@itemPriceCalculationService"></Section>
        }
    </div>
    <div class="d-flex justify-content-end">
        <Button Type="@ButtonType.Primary"
                OnClick="@OnFinishListButtonClicked"
                Class="mr-2"
                Disabled="@(!shoppingList?.AnyItemInBasket ?? true)">
            Finish List
        </Button>
    </div>
    <div>
        @foreach (var msg in errorReceiver.Stack)
        {
            <div>@msg</div>
        }
    </div>
</div>

@code{
    private ShoppingListRoot shoppingList = new ShoppingListRoot(0, null, null, Enumerable.Empty<ShoppingListSection>());

    private ShoppingListState state;
    private ErrorReceiver errorReceiver;

    private bool isInEditMode = false;
    private bool showItemsInBasket = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await itemPriceCalculationService.InitializeAsync();

        state = new ShoppingListState(shoppingList, true, false);
        errorReceiver = new ErrorReceiver(isDebug: Env.IsDevelopment(),
            (action, args, label) => GetButtonRenderFragment(action, args, label),
            notificationService);
        commandQueue.Initialize(errorReceiver);

        errorReceiver.StateChanged += () => StateHasChanged();
        errorReceiver.QueueProcessed += async () => await ReloadShoppingListAsync();
        state.StateChanged += () => StateHasChanged();
        state.ReloadRequestedAsync += async (storeId) => await LoadShoppingListAsync(storeId);

        StateHasChanged();
    }

    #region Loading

    private async Task ReloadShoppingListAsync()
    {
        await LoadShoppingListAsync(shoppingList.Store.Id);
    }

    private async Task LoadShoppingListAsync(int storeId)
    {
        try
        {
            var shoppingList = await apiClient.GetActiveShoppingListByStoreIdAsync(storeId);
            state.ChangeList(shoppingList);
            Console.WriteLine($"Loaded shopping list with {shoppingList.Items.Count} items");
        }
        catch (Exception e)
        {
            throw;
        }
    }
    #endregion

    #region Callbacks

    private void OnEditModeButtonClicked()
    {
        isInEditMode = !isInEditMode;
        StateHasChanged();
    }

    private void OnShowBasketItemsChangeButtonClicked()
    {
        showItemsInBasket = !showItemsInBasket;
        StateHasChanged();
    }

    private async Task OnItemBasketStatusChangedAsync(ShoppingListItem item)
    {
        if (item.IsInBasket)
        {
            item.RemoveFromBasket();
            var request = new RemoveItemFromBasketRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
            await commandQueue.Enqueue(request);
        }
        else
        {
            item.PutInBasket();
            var request = new PutItemInBasketRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
            await commandQueue.Enqueue(request);
        }
    }

    private async Task OnItemRemovedFromListAsync(ShoppingListItem item)
    {
        shoppingList.Remove(item.Id);
        var request = new RemoveItemFromShoppingListRequest(Guid.NewGuid(), shoppingList.Id, item.Id);
        await commandQueue.Enqueue(request);
    }

    private async Task OnItemQuantityChangedAsync(ShoppingListItem item)
    {
        var request = new ChangeItemQuantityOnShoppingListRequest(Guid.NewGuid(), shoppingList.Id, item.Id,
        item.Quantity);
        await commandQueue.Enqueue(request);
    }

    private async void OnFinishListButtonClicked()
    {
        var request = new FinishListRequest(Guid.NewGuid(), shoppingList.Id);
        await apiClient.FinishListAsync(request);
        await ReloadShoppingListAsync();
    }
    #endregion

    private async Task ReloadAfterProcessingErrorAsync()
    {
        errorReceiver.ResolveProcessingError();
        await ReloadShoppingListAsync();
    }

    private RenderFragment GetButtonRenderFragment(Action<object[]> callback, object[] args, string label = "Retry")
    {
        return@<Button Type="@ButtonType.Primary" OnClick="() => callback(args)">@label</Button>;
}

private RenderFragment GetAsyncButtonRenderFragment(Func<object[], Task> callback, object[] args, string label = "Retry")
{
return@<Button Type="@ButtonType.Primary" OnClick="async () => await callback(args)">@label</Button>;
}
}