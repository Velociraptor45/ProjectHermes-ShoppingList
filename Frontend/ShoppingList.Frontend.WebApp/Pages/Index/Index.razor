@page "/"

@inject ProjectHermes.ShoppingList.Frontend.WebApp.Services.Notification.IShoppingListNotificationService notificationService;
@inject ProjectHermes.ShoppingList.Frontend.Models.Index.Services.IItemPriceCalculationService itemPriceCalculationService;
@inject Services.IShoppingListApiService apiService;
@inject IWebAssemblyHostEnvironment env;

@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Index;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Common;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index.Models;

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index

@if (state != null)
{
    <div>
        @if (errorHandler.ApiHasProcessingError)
        {
            <ProcessingError ReloadCallback="@ReloadAfterProcessingErrorAsync"></ProcessingError>
        }
        <div class="mb-1 d-flex justify-content-end align-items-center">
            <DebugSwitch DebugHandler="@errorHandler"></DebugSwitch>
            <StoreSelect Page="@state" ErrorHandler="@errorHandler"></StoreSelect>
            <ItemVisiblityButton State="@state"></ItemVisiblityButton>
            <Button class="mr-1 d-flex align-items-center" OnClick="@OnEditModeButtonClicked"
                    Disabled="@(state.ShoppingList?.Store == null)">
                <Icon Type="edit" />
            </Button>
        </div>
        <ItemSearchBar ReloadShoppingListAsync="@ReloadShoppingListAsync"
                       ErrorHandler="@errorHandler"
                       State="@state"></ItemSearchBar>
        <div>
            @foreach (var section in GetSections())
            {
                <Section State="@state"
                         Model="@section"></Section>
            }
        </div>
        @if (state.ShoppingList != null)
        {
            <div class="d-flex align-items-end flex-column px-2">
                <div class="d-flex border-top pt-1">
                    <div class="d-flex">
                        <span>@GetInBasketPrice()</span>
                        <span>€</span>
                    </div>
                    <span class="px-1">/</span>
                    <div class="d-flex">
                        <span>@GetTotalListPrice()</span>
                        <span>€</span>
                    </div>
                </div>
            </div>
        }
        <Summary 
            State="@state"
            FragmentCreator="@errorHandler"
            OnFinishList="async () => await ReloadShoppingListAsync()"></Summary>
        <ErrorStack ErrorHandler="@errorHandler"></ErrorStack>
    </div>
}

@code{
    private ShoppingListState state;
    private ErrorHandler errorHandler;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await itemPriceCalculationService.InitializeAsync();

        errorHandler.StateChanged += StateHasChanged;
        errorHandler.QueueProcessed += async () => await ReloadShoppingListAsync();
        state.StateChanged += StateHasChanged;
        state.ReloadRequestedAsync += async storeId => await LoadShoppingListAsync(storeId);

        apiService.InitializeCommandQueue(errorHandler);

        StateHasChanged();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        state = new ShoppingListState(null, true, false);
        errorHandler = new ErrorHandler(
            env.IsDevelopment(),
            GetButtonRenderFragment,
            GetAsyncButtonRenderFragment,
            notificationService);

        return base.SetParametersAsync(parameters);
    }

    #region Loading

    private async Task ReloadShoppingListAsync()
    {
        await LoadShoppingListAsync(state.ShoppingList.Store.Id);
    }

    private async Task LoadShoppingListAsync(Guid storeId)
    {
        await apiService.LoadActiveShoppingListAsync(storeId, errorHandler, list => state.ChangeList(list));
    }

    #endregion

    private IEnumerable<ShoppingListSection> GetSections()
    {
        return state.ShoppingList?.GetNonEmptySections(!state.ItemsInBasketVisible) ?? Enumerable.Empty<ShoppingListSection>();
    }

    #region Callbacks

    private void OnEditModeButtonClicked()
    {
        state.ToggleItemEditMode();
    }
    #endregion

    private string GetTotalListPrice()
    {
        var price = state.ShoppingList.GetTotalPrice(itemPriceCalculationService);
        return $"{price:0.00}";
    }

    private string GetInBasketPrice()
    {
        var price = state.ShoppingList.GetInBasketPrice(itemPriceCalculationService);
        return $"{price:0.00}";
    }

    private async Task ReloadAfterProcessingErrorAsync()
    {
        errorHandler.ResolveProcessingError();
        await ReloadShoppingListAsync();
    }

    private RenderFragment GetButtonRenderFragment(Action callback, string label = "Retry")
    {
        return @<Button Type="@ButtonType.Primary" OnClick="callback">@label</Button>;
    }

    private RenderFragment GetAsyncButtonRenderFragment(Func<Task> callback, string label = "Retry")
    {
        return @<Button Type="@ButtonType.Primary" OnClick="async () => await callback()">@label</Button>;
    }
}