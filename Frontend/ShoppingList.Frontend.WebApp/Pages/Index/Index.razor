@page "/"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Index;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Common;
@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.Actions.PriceUpdater
@using ProjectHermes.ShoppingList.Frontend.Redux.ShoppingList.States

@inject IState<ShoppingListState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.Index

@if (State != null)
{
    <div class="shopping-content">
        @if (State.Value.Errors.HasErrors)
        {
            <ProcessingError></ProcessingError>
        }
        <div class="top-header">
            <div class="mb-1 d-flex justify-content-end align-items-center">
                <DebugSwitch></DebugSwitch>
                <StoreSelect></StoreSelect>
                <ItemVisiblityButton></ItemVisiblityButton>
                <Button class="d-flex align-items-center" OnClick="@OnEditModeButtonClicked"
                        Disabled="@(State.Value.ShoppingList is null)">
                    <Icon Type="edit" />
                </Button>
            </div>
            <ItemSearchBar></ItemSearchBar>
        </div>
        @if (State.Value.ShoppingList is not null)
        {
            <div class="sections">
                @foreach(var section in State.Value.GetSectionsToDisplay())
                {
                    <Section Model="section"></Section>
                }
            </div>
        }
        <Summary></Summary>
        <ErrorStack></ErrorStack>
    </div>
    <Modal Title="@GetTitle()"
           Visible="State.Value.PriceUpdate.IsOpen"
           OnCancel="@OnCloseUpdatePriceModalButtonClicked"
           ConfirmLoading="State.Value.PriceUpdate.IsSaving"
           Footer="@GetFooter()">
        <AntDesign.InputNumber Formatter="FormatUpdatePrice"
                               Parser="ParseUpdatePrice"
                               Class="price-update-input"
                               TValue="float"
                               Value="State.Value.PriceUpdate.Price"
                               ValueChanged="OnPriceChanged"
                               Min="0.01f"></AntDesign.InputNumber>
        @if (State.Value.PriceUpdate.Item?.TypeId is not null)
        {
            <div class="pt-3">
                <Checkbox Checked="State.Value.PriceUpdate.UpdatePriceForAllTypes" ValueChanged="OnUpdatePriceForAllTypes">
                    Update for all types
                </Checkbox>
            </div>
        }
    </Modal>
}

@code{
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new ShoppingListEnteredAction());
        Dispatcher.Dispatch(new LoadQuantityTypesAction());
        Dispatcher.Dispatch(new LoadQuantityTypesInPacketAction());
        Dispatcher.Dispatch(new LoadAllActiveStoresAction());

        base.OnInitialized();
    }

    #region Callbacks

    private void OnEditModeButtonClicked()
    {
        Dispatcher.Dispatch(new ToggleEditModeAction());
    }
    #endregion
    
    private void OnCloseUpdatePriceModalButtonClicked()
    {
        Dispatcher.Dispatch(new ClosePriceUpdaterAction());
    }

    private void OnPriceChanged(float price)
    {
        Dispatcher.Dispatch(new PriceOnPriceUpdaterChangedAction(price));
    }

    private void OnUpdatePriceForAllTypes(bool @checked)
    {
        Dispatcher.Dispatch(new UpdatePriceForAllTypesOnPriceUpdaterChangedAction(@checked));
    }

    private string GetTitle()
    {
        return $"Update price - {State.Value.PriceUpdate.Item?.Name ?? string.Empty}";
    }

    private RenderFragment GetFooter()
    {
        return 
            @<Template>
                <div class="d-flex">
                    <Button Class="ml-auto"
                        OnClick="OnUpdatePriceButtonClicked"
                            @key="@("submit")"
                        Type="@ButtonType.Primary"
                        Loading="State.Value.PriceUpdate.IsSaving">
                        Update
                    </Button>
                </div>
            </Template>;
    }

    private void OnUpdatePriceButtonClicked()
    {
        Dispatcher.Dispatch(new SavePriceUpdateAction());
    }

    private string FormatUpdatePrice(float value)
    {
        return $"{value:n2} {State.Value.PriceUpdate.Item?.QuantityType.PriceLabel}";
    }

    private string ParseUpdatePrice(string value)
    {
        if (State.Value.PriceUpdate.Item is null)
            return value;

        return value.Replace(State.Value.PriceUpdate.Item.QuantityType.PriceLabel, string.Empty);
    }
}