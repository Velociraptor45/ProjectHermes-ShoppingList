@page "/Stores"
@inject ProjectHermes.ShoppingList.Frontend.Infrastructure.Connection.IApiClient apiClient;
@inject ProjectHermes.ShoppingList.Frontend.Models.Common.Services.IShoppingListNotificationService notificationService;
@using ProjectHermes.ShoppingList.Frontend.Models;
@using ProjectHermes.ShoppingList.Frontend.WebApp.Components.Stores;
@using ProjectHermes.ShoppingList.Frontend.Models.Shared.Requests;

<div>
    @if (currentlyEditedStore == null)
    {
        <div class="d-flex">
            <div class="h4">Stores</div>
            <Button @onclick="@OnCreateStoreButtonClicked" Class="d-flex align-items-center ml-auto">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
        <div>
            <ol class="pl-0">
                @foreach (var store in stores.OrderBy(s => s.Name))
                {
                    <StoreListItem store="@store"
                                   OnStoreClickedCallback="@OnStoreSelected">
                    </StoreListItem>
                }
            </ol>
        </div>
    }
    else
    {
        <StoreEditor Store="@currentlyEditedStore"
                     SaveStoreCallback="@OnStoreSavedAsync"
                     CreateStoreCallback="@OnStoreCreatedAsync"
                     LeaveEditorCallback="@OnLeaveEditor"></StoreEditor>
    }
</div>

@code {
    private List<Store> stores = new List<Store>();

    private Store currentlyEditedStore = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await LoadPage();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Loading stores failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await LoadPage(),
                    new object[0]));
            return;
        }
    }

    private async Task LoadPage()
    {
        stores = (await apiClient.GetAllActiveStoresAsync()).ToList();
        StateHasChanged();
    }

    private void LeaveEditor()
    {
        currentlyEditedStore = null;
    }

    private void OnLeaveEditor()
    {
        LeaveEditor();
    }

    private void OnStoreSelected(int storeId)
    {
        currentlyEditedStore = stores.FirstOrDefault(s => s.Id == storeId);
    }

    private void OnCreateStoreButtonClicked()
    {
        var defaultSection = new StoreSection(new StoreSectionId(Guid.NewGuid()), "Default", 0, true);
        currentlyEditedStore = new Store(0, "", new[] { defaultSection });
    }

    private async Task OnStoreCreatedAsync(Store store)
    {
        var request = new CreateStoreRequest(Guid.NewGuid(), store);
        try
        {
            await apiClient.CreateStoreAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Creating store failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnStoreCreatedAsync((Store)items[0]),
                        new object[] { store }));
            return;
        }
        LeaveEditor();

        try
        {
            await LoadPage();
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Loading stores failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await LoadPage(),
                    new object[0]));
            return;
        }
    }

    private async Task OnStoreSavedAsync(Store store)
    {
        var request = new ModifyStoreRequest(Guid.NewGuid(), store.Id, store.Name, store.Sections);
        try
        {
            await apiClient.ModifyStoreAsync(request);
        }
        catch (Exception e)
        {
            notificationService.NotifyError("Saving store failed", e.Message,
                GetButtonRenderFragment(
                    async (items) => await OnStoreSavedAsync((Store)items[0]),
                        new object[] { store }));
            return;
        }
        LeaveEditor();
    }

    private RenderFragment GetButtonRenderFragment(Func<object[], Task> callback, object[] args, string label = "Retry")
    {
        return@<Button Type="@ButtonType.Primary" OnClick="async () => await callback(args)">@label</Button>;
}
}