@page "/item-categories"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.Actions
@using ProjectHermes.ShoppingList.Frontend.Redux.ItemCategories.States
@using ProjectHermes.ShoppingList.Frontend.Redux.Shared.States

@inject IState<SharedState> SharedState
@inject IState<ItemCategoryState> State
@inject IDispatcher Dispatcher

@namespace ProjectHermes.ShoppingList.Frontend.WebApp.Pages.ItemCategories

<div class="item-categories">
    <div class="d-flex mt-2 top-bar">
        <div class="d-flex search-bar">
            <Input TValue="string" @bind-value="@_input" @ref="_searchInput"
                   OnPressEnter="@OnLoadButtonClicked" 
                   Placeholder="Item category name"></Input>
            <Button @onclick="@OnLoadButtonClicked" Class="ml-1 mr-4">
                <i class="bi bi-search"></i>
            </Button>
        </div>
        <Tooltip Placement="Placement.BottomRight" Title="@("Create new item category")" Disabled="SharedState.Value.IsMobile">
            <Button @onclick="@OnCreateItemCategoryButtonClicked" Class="d-flex align-items-center ml-auto"
                    Type="@ButtonType.Primary">
                <i class="bi bi-plus-lg"></i>
            </Button>
        </Tooltip>
    </div>
    <div class="mt-2">
        @if (@State.Value.Search.TriggeredAtLeastOnce && State.Value.Search.SearchResults.Count == 0)
        {
            <div class="no-item-categories-found-notice">
                No item categories found
            </div>
        }
        @foreach (var searchResult in State.Value.Search.SearchResults)
        {
            <SearchResult Model="searchResult" TAction="EditItemCategoryAction"></SearchResult>
        }
    </div>
</div>

@code {
    private string _input = "";
    private Input<string> _searchInput;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
            _searchInput.Focus();
    }

    private void OnLoadButtonClicked()
    {
        Dispatcher.Dispatch(new SearchItemCategoriesAction(_input));
    }

    private void OnCreateItemCategoryButtonClicked()
    {
        Dispatcher.Dispatch(new EditItemCategoryAction
        {
            Id = Guid.Empty
        });
    }
}