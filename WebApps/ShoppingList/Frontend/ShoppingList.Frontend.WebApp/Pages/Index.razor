@page "/"
@inject ShoppingList.Api.Client.IShoppingListApiClient apiClient;
@using ShoppingList.Frontend.WebApp.Extensions.Contracts;
@using ShoppingList.Frontend.WebApp.Components.Index;
@using ShoppingList.Frontend.Models;
@using ShoppingList.Frontend.Models.Index;
@using ShoppingList.Frontend.Models.Index.Search;
@using OneOf;

<div>
    <div class="mb-1 d-flex justify-content-end align-items-center">
        <Select SelectedValues=@availableStores?.SelectedStore?.Name Class="min-w-100" OnChange="@OnSelectedStoreChanged">
            @foreach (var store in availableStores.Stores)
            {
                <SelectOption Value=@store.Id.ToString() Class="min-w-100">@store.Name</SelectOption>
            }
        </Select>
        <Button class="mr-1 d-flex align-items-center" OnClick="@OnEditModeButtonClicked">
            <Icon Type="edit" />
        </Button>
    </div>
    <!--search bar-->
    <div class="mb-2 d-flex">
        <Select @ref="@searchSelect" @bind-Value="@searchBar.Input" @onfocusin="OnSearchBarFocusIn"
                Class="@(searchBar.Active ? "ml-1 mr-2 w-100 cursor-text" : "mx-1 w-100 cursor-text")"
                OnSearch="OnSearchBarInput"
                ShowSearch="true"
                OnChange="OnSearchItemSelected">
            @foreach (var option in searchBar.Options)
            {
                <SelectOption Value="@option.ItemId.ToString()">@option.Name</SelectOption>
            }
        </Select>

        @if (searchBar.Active)
        {
            <Button Class="mr-1" OnClick="OnSearchBarCancleButtonClicked">Cancle</Button>
        }
    </div>
    @foreach (var item in shoppingList.Items)
    {
        <ShoppingListItemComponent Item="@item"
                                   ItemBasketStatusChangedCallback="@OnItemBasketStatusChangedAsync"
                                   ItemQuantityChangedCallback="OnItemQuantityChangedAsync"
                                   IsInEditMode="isInEditMode"></ShoppingListItemComponent>
    }
    <div class="d-flex justify-content-end">
        <Button Type="primary" class="mr-2">Finish List</Button>
    </div>
</div>

@code{
    private ShoppingListRoot shoppingList = new ShoppingListRoot(0, null, null, Enumerable.Empty<ShoppingListItem>());
    private AvailableStores availableStores = new AvailableStores(Enumerable.Empty<Store>());

    private SearchBar searchBar = new SearchBar();
    private Select searchSelect;

    private bool isInEditMode = false;

    List<ShoppingListItem> items = new List<ShoppingListItem>();

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(4000);
        await base.OnInitializedAsync();
        await LoadAvailableStoresAsync();
        Console.WriteLine($"{availableStores.Stores.Count} stores loaded");
        StateHasChanged();
    }

    private async Task LoadAvailableStoresAsync()
    {
        var stores = (await apiClient.GetAllActiveStores())
            .Select(store => store.ToModel())
            .ToList();

        availableStores = new AvailableStores(stores);
    }

    private async Task LoadShoppingListAsync()
    {
        shoppingList = (await apiClient.GetActiveShoppingListByStoreId(availableStores.SelectedStore.Id))
            .ToModel();
        StateHasChanged();
    }

    private async void OnSelectedStoreChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        int storeId = int.Parse(value.AsT0);
        availableStores.SetSelectedStore(storeId);
        await LoadShoppingListAsync();
    }

    private void OnEditModeButtonClicked()
    {
        isInEditMode = !isInEditMode;
        StateHasChanged();
    }

    private void OnSearchBarFocusIn()
    {
        searchBar.Active = true;
    }

    private void OnSearchBarCancleButtonClicked()
    {
        searchBar.Active = false;
    }

    private async void OnSearchBarInput(string searchInput)
    {
        if (string.IsNullOrWhiteSpace(searchInput))
        {
            searchBar.Options = Enumerable.Empty<ItemSearchResult>();
            return;
        }

        var result = await apiClient.GetItemSearchResults(searchInput, shoppingList.Store.Id);
        searchBar.Options = result.Select(r => r.ToModel());
        StateHasChanged();
    }

    private async void OnSearchItemSelected(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        if (value.AsT0 == null)
            return;

        var itemId = int.Parse(value.AsT0);
        await apiClient.AddItemToShoppingList(shoppingList.Id, itemId, 1); //todo default item quantity

        searchBar.ResetInput();
        searchBar.ResetOptions();
        await searchSelect.ClearAll();

        await LoadShoppingListAsync();
        StateHasChanged();
    }

    private async Task OnItemBasketStatusChangedAsync(ShoppingListItem item)
    {
        if (item.IsInBasket)
        {
            await apiClient.RemoveItemFromBasket(shoppingList.Id, item.Id);
        }
        else
        {
            await apiClient.PutItemInBasket(shoppingList.Id, item.Id);
        }
        await LoadShoppingListAsync();
    }

    private async Task OnItemQuantityChangedAsync(ShoppingListItem item)
    {
        await apiClient.ChangeItemQuantityOnShoppingList(shoppingList.Id, item.Id, item.Quantity);
        await LoadShoppingListAsync();
    }
}