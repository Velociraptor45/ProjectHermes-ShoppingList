@page "/items"
@inject ShoppingList.Frontend.Models.Ports.IOfflineClient offlineClient;
@using ShoppingList.Frontend.WebApp.Components.Items;
@using ShoppingList.Frontend.Models;
@using ShoppingList.Frontend.Models.Items;

<div>
    <Button @onclick="@(() => isInEditMode = !isInEditMode)">Change View</Button>
    @if (!isInEditMode)
    {
        <div>Items</div>
        <div>
            <div class="d-flex">
                <div>
                    Store
                </div>
                <Select Mode="Tags" Placeholder="Stores" @ref="@storesSelectRef">
                    @foreach (var store in stores)
                    {
                        <SelectOption Value=@store.Id.ToString() Class="min-w-100">@store.Name</SelectOption>
                    }
                </Select>
            </div>
            <div class="d-flex">
                <div>
                    Category
                </div>
                <Select Mode="Tags" Placeholder="Category" @ref="@itemCategoriesSelectRef">
                    @foreach (var itemCategory in itemCategories)
                    {
                        <SelectOption Value="@itemCategory.Id.ToString()">@itemCategory.Name</SelectOption>
                    }
                </Select>
            </div>
            <div class="d-flex">
                <div>
                    Manufacturer
                </div>
                <Select Mode="Tags" Placeholder="Manufacturer" @ref="@manufacturersSelectRef">
                    @foreach (var manufacturer in manufacturers)
                    {
                        <SelectOption Value="@manufacturer.Id.ToString()">@manufacturer.Name</SelectOption>
                    }
                </Select>
            </div>
            <Button Class="" @onclick="@OnLoadButtonClickedAsync">Load</Button>
        </div>
        <div>
            <!-- result item list -->
            @foreach (var item in items)
            {
                <ItemFilterResultComponent Item="@item"
                                           OnClickCallback="@OnItemClicked"></ItemFilterResultComponent>
            }
        </div>
    }
    else
    {
        <ItemEditor StoreItem="@currentlyEditedItem"
                    Stores="@stores"
                    Manufacturers="@manufacturers"
                    ItemCategories="@itemCategories"
                    QuantityTypes="@quantityTypes"
                    QuantityInPacketTypes="@quantityInPacketTypes"></ItemEditor>
    }
</div>

@code {
    private List<Store> stores = new List<Store>();
    private List<ItemCategory> itemCategories = new List<ItemCategory>();
    private List<Manufacturer> manufacturers = new List<Manufacturer>();
    private List<ItemFilterResult> items = new List<ItemFilterResult>();
    private List<QuantityType> quantityTypes = new List<QuantityType>();
    private List<QuantityInPacketType> quantityInPacketTypes = new List<QuantityInPacketType>();

    private Select storesSelectRef;
    private Select itemCategoriesSelectRef;
    private Select manufacturersSelectRef;

    private bool isInEditMode = false; // todo remove
    private StoreItem currentlyEditedItem = null;

    protected async override Task OnInitializedAsync()
    {
        stores = (await offlineClient.GetAllActiveStoresAsync()).ToList();
        manufacturers = (await offlineClient.GetAllActiveManufacturersAsync()).ToList();
        itemCategories = (await offlineClient.GetAllActiveItemCategoriesAsync()).ToList();
        quantityTypes = (await offlineClient.GetAllQuantityTypesAsync()).ToList();
        quantityInPacketTypes = (await offlineClient.GetAllQuantityInPacketTypesAsync()).ToList();

        var result = await offlineClient.GetItemFilterResultAsync(
            new List<int> { 1 },
            new List<int> { 1 },
            new List<int> { 1 });
        items = result.ToList();

        await base.OnInitializedAsync();
    }

    private async Task OnLoadButtonClickedAsync()
    {
        var stores = storesSelectRef.SelectedValues.Value.AsT1.Select(s => int.Parse(s)).ToList();
        var itemCategories = itemCategoriesSelectRef.SelectedValues.Value.AsT1.Select(cat => int.Parse(cat)).ToList();
        var manufacturers = manufacturersSelectRef.SelectedValues.Value.AsT1.Select(m => int.Parse(m)).ToList();

        var result = await offlineClient.GetItemFilterResultAsync(
            stores,
            itemCategories,
            manufacturers);
        items = result.ToList();
        StateHasChanged();
    }

    private async Task OnItemClicked(int itemId)
    {
        currentlyEditedItem = await offlineClient.GetItemByIdAsync(itemId);
        isInEditMode = true;
    }
}