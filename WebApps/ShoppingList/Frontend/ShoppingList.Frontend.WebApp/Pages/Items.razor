@page "/items"
@inject ShoppingList.Frontend.Models.Ports.IOfflineClient offlineClient;
@using ShoppingList.Frontend.WebApp.Components.Items;
@using ShoppingList.Frontend.Models;
@using ShoppingList.Frontend.Models.Items;

<div>
    <Button @onclick="@(() => isInEditMode = !isInEditMode)"></Button>
    @if (!isInEditMode)
    {
        <div>Items</div>
        <div>
            <div class="d-flex">
                <div>
                    Store
                </div>
                <Select Placeholder="Stores"></Select>
            </div>
            <div class="d-flex">
                <div>
                    Category
                </div>
                <Select Placeholder="Category"></Select>
            </div>
            <div class="d-flex">
                <div>
                    Manufacturer
                </div>
                <Select Placeholder="Manufacturer"></Select>
            </div>
        </div>
        <div>
            <!-- result item list -->
        </div>
    }
    else
    {
        <ItemEditor ItemId="@currentlyEditedItemId"
                    Stores="@stores"
                    Manufacturers="@manufacturers"
                    ItemCategories="@itemCategories"></ItemEditor>
    }
</div>

@code {
    private List<Store> stores = new List<Store>();
    private List<ItemCategory> itemCategories = new List<ItemCategory>();
    private List<Manufacturer> manufacturers = new List<Manufacturer>();

    private bool isInEditMode = false; // todo remove
    private int currentlyEditedItemId = 0;

    protected override Task OnInitializedAsync()
    {
        //todo:
        // - load all active stores
        // - load all active manufacturers
        // - load all active item categories
        return base.OnInitializedAsync();
    }

    private void OnItemClicked()
    {
        // todo: set currentlyEditedItem
    }
}