@using ShoppingList.Frontend.Models.Items;
@using ShoppingList.Frontend.Models;
@using System.Collections.Generic;
@using OneOf;

<div class="px-2">
    <div class="d-flex">
        <Button Class="d-flex align-items-center" OnClick="@OnBackButtonClickedAsync">
            <Icon Type="arrow-left"></Icon>
        </Button>
        <div class="mx-3">
            <Input @bind-Value="@StoreItem.Name" />
        </div>
        @if (StoreItem.Id != 0)
        {
                <Button Danger="true"
                        Class="ml-auto"
                        OnClick="@OnDeleteButtonClickedAsync">
                    Delete
                </Button>
        }
    </div>
    <Divider Class="my-3"></Divider>
    <div class="d-flex pb-2">
        <div>
            <div class="font-weight-bold">Category</div>
            <Select Placeholder="Category" DefaultValue="@StoreItem.ItemCategoryId.ToString()"
                    OnChange="@OnItemCategoryChanged">
                @foreach (var itemCategory in ItemCategories)
                {
                    <SelectOption Value="@itemCategory.Id.ToString()">@itemCategory.Name</SelectOption>
                }
            </Select>
        </div>
        <div class="ml-3">
            <div class="font-weight-bold">Manufacturer</div>
            <Select Placeholder="Manufacturer" DefaultValue="@StoreItem.ManufacturerId.ToString()"
                    OnChange="@OnManfacturerChanged">
                @foreach (var manufacturer in Manufacturers)
                {
                    <SelectOption Value="@manufacturer.Id.ToString()">@manufacturer.Name</SelectOption>
                }
            </Select>
        </div>
    </div>
    <div class="d-flex py-2">
        <Select Placeholder="QuantityType" DefaultValue="@StoreItem.QuantityType.ToString()"
                OnChange="@OnQuantityTypeChanged">
            @foreach (var type in QuantityTypes)
            {
                <SelectOption Value="@type.Id.ToString()">@type.Name</SelectOption>
            }
        </Select>
        @if (StoreItem.QuantityType == 0)
        {
            <div class="ml-3 d-flex flex-column">
                <Select Placeholder="QuantityTypeInPacket" DefaultValue="@StoreItem.QuantityInPacketType.ToString()"
                        OnChange="@OnQuantityInPacketTypeChanged">
                    @foreach (var type in QuantityInPacketTypes)
                    {
                        <SelectOption Value="@type.Id.ToString()">@type.Name</SelectOption>
                    }
                </Select>
                <Input Class="max-w-50" @bind-Value="@StoreItem.QuantityInPacket"></Input>
            </div>
        }
    </div>
    <div class="font-weight-bold">Stores</div>
    <div class="d-flex flex-row py-2">
        <!-- availabilities -->
        <div>
            @for (int i = 0; i < StoreItem.Availabilities.Count; i++)
            {
                <Availablity ComponentIndex="i"
                             Availability="@StoreItem.Availabilities[i]"
                             Stores="@Stores"
                             DisabledStoreIds="@GetDisabledStoresForAvailabilityByIndex(i)"
                             OnRemoveAvailabilityCallback="@OnRemoveAvailabilityButtonClicked"></Availablity>
            }
        </div>
        <div class="ml-4 d-flex justify-content-end">
            <Button class="d-flex align-items-center" OnClick="OnAddStoreButtonClicked"
                    Disabled="@(!GetNotRegisteredStoreIds(StoreItem).Any())">
                <Icon Type="plus"></Icon>
            </Button>
        </div>
    </div>
    <div class="pb-2 pt-4">
        <TextArea Placeholder="Comment" MinRows="2" @bind-Value="@StoreItem.Comment"></TextArea>
    </div>
    <div class="d-flex justify-content-end">
        @if (StoreItem.Id == 0)
        {
            <Button OnClick="@OnCreateButtonClicked">Create</Button>
        }
        else
        {
            <Button OnClick="@OnUpdateButtonClickedAsync">Update</Button>
            <Button Class="ml-2" OnClick="@OnChangeButtonClickedAsync">Change</Button>
        }
    </div>
</div>

@code {
    [Parameter] public StoreItem StoreItem { get; set; }
    [Parameter] public List<Store> Stores { get; set; }
    [Parameter] public List<Manufacturer> Manufacturers { get; set; }
    [Parameter] public List<ItemCategory> ItemCategories { get; set; }
    [Parameter] public List<QuantityType> QuantityTypes { get; set; }
    [Parameter] public List<QuantityInPacketType> QuantityInPacketTypes { get; set; }

    [Parameter] public EventCallback<StoreItem> UpdateItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> ChangeItemCallback { get; set; }
    [Parameter] public EventCallback<StoreItem> CreateItemCallback { get; set; }
    [Parameter] public EventCallback<int> DeleteItemCallback { get; set; }
    [Parameter] public EventCallback LeaveEditorCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private int GetIndex(StoreItemAvailability av)
    {
        return StoreItem.Availabilities.IndexOf(av);
    }

    private void OnAddStoreButtonClicked()
    {
        var notRegisteredStoreIds = GetNotRegisteredStoreIds(StoreItem);
        if (!notRegisteredStoreIds.Any())
            return;

        StoreItem.Availabilities.Add(
            new StoreItemAvailability(notRegisteredStoreIds.First(), 1));
    }

    private void OnRemoveAvailabilityButtonClicked(int availabilityIndex)
    {
        StoreItem.Availabilities.RemoveAt(availabilityIndex);
        StateHasChanged();
    }

    private async Task OnUpdateButtonClickedAsync()
    {
        await UpdateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnChangeButtonClickedAsync()
    {
        await ChangeItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnCreateButtonClicked()
    {
        await CreateItemCallback.InvokeAsync(StoreItem);
    }

    private async Task OnDeleteButtonClickedAsync()
    {
        await DeleteItemCallback.InvokeAsync(StoreItem.Id);
    }

    private async Task OnBackButtonClickedAsync()
    {
        await LeaveEditorCallback.InvokeAsync(null);
    }

    private void OnManfacturerChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        StoreItem.ManufacturerId = int.Parse(value.AsT0);
    }

    private void OnItemCategoryChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        StoreItem.ItemCategoryId = int.Parse(value.AsT0);
    }

    private void OnQuantityTypeChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        StoreItem.QuantityType = int.Parse(value.AsT0);
        StateHasChanged();
    }

    private void OnQuantityInPacketTypeChanged(
        OneOf<string, IEnumerable<string>, LabeledValue, IEnumerable<LabeledValue>> value,
        OneOf<SelectOption, IEnumerable<SelectOption>> option)
    {
        StoreItem.QuantityInPacketType = int.Parse(value.AsT0);
    }

    private IEnumerable<int> GetNotRegisteredStoreIds(StoreItem storeItem)
    {
        var registeredStoreId = storeItem.Availabilities.Select(av => av.StoreId);
        var allStoreIds = Stores.Select(s => s.Id);

        return allStoreIds.Except(registeredStoreId);
    }

    private IEnumerable<int> GetRegisteredStoreIds(StoreItem storeItem)
    {
        return storeItem.Availabilities.Select(av => av.StoreId);
    }

    private IEnumerable<int> GetDisabledStoresForAvailabilityByIndex(int availabilityIndex)
    {
        return GetRegisteredStoreIds(StoreItem)
            .Except(new List<int>() { StoreItem.Availabilities[availabilityIndex].StoreId });
    }
}