@page "/items"
@inject IShoppingRepositoryFactory shoppingRepositoryFactory
@using EntityModels;
@using Extension;

<div class="items-page">
    <h1 class="heading h1 mb-4">
        Items
    </h1>

    <div class="row">
        <div class="left-part col-12 col-md-4 col-xl-4">
            <div class="new-store w-100 mb-2">
                <BSButton Color="Color.Success" Class="w-100" @onclick="OnNewItemButtonClicked">
                    <span class="oi oi-plus"></span>
                </BSButton>
            </div>
            <div class="store-selection">
                <ol class="p-0">
                    @foreach (EntityModels.ItemDto item in items)
                    {
                        <ItemListItem ItemDto="@item"
                                      StoreName="test"
                                      IsSelected="@(selectedItem != null && item.Id == selectedItem.Id)"
                                      OnItemListItemClicked="OnSelectedItemChanged"></ItemListItem>
                    }
                </ol>
            </div>
        </div>
        @if(selectedItem != null)
        {
            <div class="right-part col-12 col-md-8 col-xl-8">
                @if (isInEditMode)
                {
                    <div>
                        <div class="d-flex align-items-center mb-2">
                            <BSLabel Class="mb-0 pr-2">Name</BSLabel>
                            <BSBasicInput InputType="InputType.Text" T="string"
                                          @bind-Value="selectedItem.Name"
                                          Class="border-right"></BSBasicInput>
                        </div>
                        <div class="d-flex mb-2">
                            <!--QuantityType dropdown-->
                            <BSDropdown Class="mr-4">
                                <BSDropdownToggle Color="Color.Primary">@selectedItem.QuantityType.ToString()</BSDropdownToggle>
                                <BSDropdownMenu>
                                    @foreach (EntityModels.QuantityType quantityType in availableQuantityTypes)
                                    {
                                        <BSDropdownItem>
                                            <CustomDropdownItem T="EntityModels.QuantityType"
                                                                Item="@quantityType"
                                                                DropdownText="@quantityType.ToString()"
                                                                OnClickCallback="OnQuantityTypeChanged">

                                            </CustomDropdownItem>
                                        </BSDropdownItem>
                                    }
                                </BSDropdownMenu>
                            </BSDropdown>
                            <!-- Store dropdown -->
                            <BSDropdown>
                                <BSDropdownToggle Color="Color.Primary">
                                    @(availableStores.FirstOrDefault(s => s.StoreId == selectedItem.StoreId)?.Name ?? "Choose store")
                                </BSDropdownToggle>
                                <BSDropdownMenu>
                                    @foreach (StoreDto store in availableStores)
                                    {
                                        <BSDropdownItem>
                                            <CustomDropdownItem T="StoreDto"
                                                                Item="@store"
                                                                DropdownText="@store.Name"
                                                                OnClickCallback="OnSelectedStoreChanged">

                                            </CustomDropdownItem>
                                        </BSDropdownItem>
                                    }
                                </BSDropdownMenu>
                            </BSDropdown>
                        </div>
                        <div class="mb-2 d-flex align-items-center">
                            <BSBasicInput T="decimal" InputType="InputType.Text"
                                          @bind-Value="@selectedItem.PricePerQuantity"
                                          Class="w-max-55"></BSBasicInput>
                            <BSLabel Class="mb-0 pl-1">€@(selectedItem.QuantityType == QuantityType.Unit ? "" : "/kg")</BSLabel>
                        </div>
                        <div class="mb-3">
                            <BSLabel Class="mb-0">Comment</BSLabel>
                            <BSBasicInput InputType="InputType.TextArea"
                                            T="string"
                                            Rows="2"
                                            @bind-Value="selectedItem.Comment"></BSBasicInput>
                        </div>
                        <div class="d-flex justify-content-end">
                            <BSButton Color="Color.Danger" @onclick="OnCancleEditingItem">Cancle</BSButton>
                            @switch (editMode)
                            {
                                case ItemEditMode.Change:
                                    <BSButton Color="Color.Success" @onclick="OnSaveItemButtonClicked">Change Item</BSButton>
                                    break;
                                case ItemEditMode.Create:
                                    <BSButton Color="Color.Success" @onclick="OnSaveItemButtonClicked">Create Item</BSButton>
                                    break;
                                case ItemEditMode.Update:
                                    <BSButton Color="Color.Success" @onclick="OnSaveItemButtonClicked">Update Item</BSButton>
                                    break;
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <div class="d-flex align-items-center">
                            <div class="h2 border-right mb-0 pr-2">@selectedItem.Name</div>
                            <div class="h4 mb-0 pl-2">@(availableStores.FirstOrDefault(s => s.StoreId == selectedItem.StoreId)?.Name ?? "")</div>
                            <BSButton Class="ml-auto" Color="Color.Info" Size="Size.Small" @onclick="OnChangeItemButtonClicked">
                                <span class="oi oi-pencil"></span>
                            </BSButton>
                        </div>
                        <hr class="mt-1 mb-2" />
                        <div class="d-flex justify-content-start">
                            <div>@selectedItem.PricePerQuantity€@(selectedItem.QuantityType == QuantityType.Weight ? "/kg" : "")</div>
                        </div>
                        <div class="pt-4">
                            <BSFormGroup>
                                <BSLabel>Comment</BSLabel>
                                <BSBasicInput InputType="InputType.TextArea"
                                              T="string"
                                              Rows="2"
                                              IsDisabled="true"
                                              @bind-Value="selectedItem.Comment"></BSBasicInput>
                            </BSFormGroup>
                        </div>
                        <div class="d-flex justify-content-end">
                            <BSButton Color="Color.Info" @onclick="OnUpdateItemButtonClicked">Update Item</BSButton>
                            <BSButton Color="Color.Danger" @onclick="OnDeleteItemButtonClicked">Delete Item</BSButton>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<EntityModels.ItemDto> items;
    private List<StoreDto> availableStores;
    private List<QuantityType> availableQuantityTypes;

    private ItemDto selectedItem;
    private ItemDto selectedItemBeforeEditModeActivated;

    private IShoppingRepository repository;

    private bool isInEditMode = false;
    private ItemEditMode editMode;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        if (repository == null)
        {
            repository = shoppingRepositoryFactory.Create();
            ReloadItems();
            availableStores = await repository.GetAllStoresAsync();
            availableQuantityTypes =
                Enum.GetValues(typeof(QuantityType)).Cast<QuantityType>().ToList();
        }
    }

    private void ReloadItems()
    {
        items = repository.GetAllItems().Where(i => i.Active).ToList();
    }

    private ItemDto GetNewItem()
    {
        return new ItemDto()
        {
            Name = "",
            QuantityType = QuantityType.Unit,
            PricePerQuantity = 1m,
            Comment = ""
        };
    }

    private async Task ChangeItem()
    {
        await repository.ChangeItemAsync(selectedItem);
        ReloadItems();
        selectedItem = items.FirstOrDefault(i => i.Id == selectedItem.Id);
    }

    private async Task UpdateItem()
    {
        await repository.UpdateItemAsync(selectedItem);
        await repository.DeactivateItemAsync(selectedItemBeforeEditModeActivated.Id);
        ReloadItems();
        selectedItem = items.Last();
    }

    private async Task CreateItem()
    {

    }

    private async void OnSaveItemButtonClicked()
    {
        switch (editMode)
        {
            case ItemEditMode.Change:
                await ChangeItem();
                break;
            case ItemEditMode.Create:
                await CreateItem();
                break;
            case ItemEditMode.Update:
                await UpdateItem();
                break;
        }
        EndEditMode();
        StateHasChanged();
    }

    private void OnCancleEditingItem()
    {
        selectedItem = selectedItemBeforeEditModeActivated;
        EndEditMode();
    }

    private void OnChangeItemButtonClicked()
    {
        StartEditMode(ItemEditMode.Change);
    }

    private void OnUpdateItemButtonClicked()
    {
        StartEditMode(ItemEditMode.Update);
        selectedItem = selectedItem.Clone();
    }

    private void OnNewItemButtonClicked()
    {
        StartEditMode(ItemEditMode.Create);
        selectedItem = GetNewItem();
    }

    private void EndEditMode()
    {
        isInEditMode = false;
        selectedItemBeforeEditModeActivated = null;
    }

    private void StartEditMode(ItemEditMode editMode)
    {
        isInEditMode = true;
        selectedItemBeforeEditModeActivated = selectedItem;
        this.editMode = editMode;
    }

    private void OnSelectedStoreChanged(StoreDto store)
    {
        selectedItem.StoreId = store.StoreId;
    }

    private void OnSelectedItemChanged(ItemDto itemDto)
    {
        if (!isInEditMode)
        {
            selectedItem = itemDto;
        }
    }

    private void OnQuantityTypeChanged(QuantityType quantityType)
    {
        selectedItem.QuantityType = quantityType;
    }

    private async void OnDeleteItemButtonClicked()
    {
        await repository.DeactivateItemAsync(selectedItem.Id);
    }
}
