@page "/stores"
@inject IShoppingRepositoryFactory shoppingRepositoryFactory

<div class="stores-page">
    <h1 class="heading h1 mb-4">
        Stores
    </h1>

    <div class="row">
        <div class="left-part col-12 col-md-4 col-xl-4">
            <div class="new-store w-100 mb-2">
                <BSButton Color="Color.Success" Class="w-100" @onclick="OnNewStoreButtonClicked">
                    <span class="oi oi-plus"></span>
                </BSButton>
            </div>
            <div class="store-selection">
                <ol class="p-0">
                    @foreach (StoreDto store in stores)
                    {
                        <StoreListItem StoreDto="@store"
                                       AvailableItemsCount="@GetItemCountInStoreById(store.StoreId)"
                                       IsSelected="@(selectedStore != null && store.StoreId == selectedStore.StoreId)"
                                       OnStoreListItemClicked="OnSelectedStoreChanged"></StoreListItem>
                    }
                </ol>
            </div>
        </div>
        @if (selectedStore != null)
        {
            <div class="right-part col-12 col-md-8 col-xl-8 d-flex flex-column">
                <div class="d-flex flex-row @(isCreatingNewStore ? "align-items-center" : "")">
                    @if (isEditingStoreName || isCreatingNewStore)
                    {
                        if (!isCreatingNewStore)
                        {
                            <BSButtonGroup Class="mr-2">
                                <BSButton Color="Color.Warning"
                                          @onclick="OnCancleEditingStoreNameClicked"><span class="oi oi-x"></span></BSButton>
                                <BSButton Color="Color.Success"
                                          @onclick="OnSaveNewStoreNameClicked"><span class="oi oi-check"></span></BSButton>
                            </BSButtonGroup>
                        }
                        else
                        {
                            <div class="pr-2 mb-0 h5 font-weight-bold">Name</div>
                        }
                        <BSBasicInput T="string" @bind-Value="@newStoreName"></BSBasicInput>
                    }
                    else
                    {
                        <div class="store-name h2">@selectedStore.Name</div>
                        <div class="edit-store-name ml-2">
                            <BSButton IsOutline="true"
                                      Size="Size.Small"
                                      Color="Color.Info"
                                      @onclick="OnEditShopNameClicked">
                                <span class="oi oi-pencil"></span>
                            </BSButton>
                        </div>
                    }
                </div>
                <div class="d-flex justify-content-end flex-row pt-2">
                    @if (isCreatingNewStore)
                    {
                        <BSButton Color="Color.Warning" @onclick="OnCancleNewStore">Cancle</BSButton>
                        <BSButton Color="Color.Success" @onclick="OnSaveNewStore">Save</BSButton>
                    }
                    else
                    {
                        <BSButton Color="Color.Danger" @onclick="OnDeleteStoreButtonClicked">
                            Delete
                        </BSButton>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<StoreDto> stores = new List<StoreDto>();
    private Dictionary<uint, int> itemCountsInStore = new Dictionary<uint, int>();
    private StoreDto selectedStore;

    private IShoppingRepository repository;

    private bool isEditingStoreName = false;
    private bool isCreatingNewStore = false;
    private string newStoreName;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        if (repository == null)
        {
            repository = shoppingRepositoryFactory.Create();
            await LoadStores();
            OrderStores();
            LoadItemCountsInStores();
            StateHasChanged();
        }
    }

    private async Task LoadStores()
    {
        stores = await repository.GetAllStoresAsync();
    }

    private void OrderStores()
    {
        stores = stores.OrderBy(store => store.Name);
    }

    private void LoadItemCountsInStores()
    {
        foreach(StoreDto store in stores)
        {
            int itemCount = repository.GetItemCountInStore(store.StoreId);
            itemCountsInStore.Add(store.StoreId, itemCount);
        }
    }

    private int GetItemCountInStoreById(uint storeId)
    {
        return itemCountsInStore.ContainsKey(storeId) ? itemCountsInStore[storeId] : 0;
    }

    private void CancleStoreCreation()
    {
        isCreatingNewStore = false;
        selectedStore = null;
    }

    private void OnEditShopNameClicked()
    {
        newStoreName = selectedStore.Name;
        isEditingStoreName = true;
    }

    private void OnDeleteStoreButtonClicked()
    {

    }

    private void OnNewStoreButtonClicked()
    {
        isCreatingNewStore = true;
        isEditingStoreName = false;
        selectedStore = new StoreDto();
        newStoreName = "";
    }

    private void OnSelectedStoreChanged(StoreDto store)
    {
        CancleStoreCreation();
        selectedStore = store;
        isEditingStoreName = false;
    }

    private async void OnSaveNewStore()
    {
        isCreatingNewStore = false;
        selectedStore.Name = newStoreName;
        repository.AddNewStore(selectedStore);
        await LoadStores();
        OrderStores();
        StateHasChanged();
    }

    private void OnCancleNewStore()
    {
        CancleStoreCreation();
    }

    private void OnSaveNewStoreNameClicked()
    {
        isEditingStoreName = false;
        selectedStore.Name = newStoreName;
        repository.UpdateStore(selectedStore);
        OrderStores();
    }

    private void OnCancleEditingStoreNameClicked()
    {
        isEditingStoreName = false;
    }
}
