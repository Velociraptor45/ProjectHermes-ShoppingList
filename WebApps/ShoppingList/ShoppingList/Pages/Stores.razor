@page "/stores"
@inject IShoppingRepositoryFactory shoppingRepositoryFactory

<div class="stores-page">
    <h1 class="heading h1 mb-4">
        Stores
    </h1>

    <div class="row">
        <div class="left-part col-12 col-md-4 col-xl-4">
            <div class="new-store w-100 mb-2">
                <BSButton Color="Color.Success" Class="w-100" @onclick="OnNewStoreButtonClicked">
                    <span class="oi oi-plus"></span>
                </BSButton>
            </div>
            <div class="store-selection">
                <ol class="p-0">
                    @foreach (StoreDto store in stores)
                    {
                        <StoreListItem StoreDto="@store"
                                       AvailableItemsCount="@GetItemCountInStoreById(store.StoreId)"
                                       IsSelected="@(selectedStore != null && store.StoreId == selectedStore.StoreId)"
                                       OnStoreListItemClicked="OnSelectedStoreChanged"></StoreListItem>
                    }
                </ol>
            </div>
        </div>
        @if (selectedStore != null)
        {
            <div class="right-part col-12 col-md-8 col-xl-8 d-flex flex-column">
                <div class="d-flex flex-row">
                    <div class="store-name h2">@selectedStore.Name</div>
                    <div class="edit-store-name ml-2">
                        <BSButton IsOutline="true"
                                  Size="Size.Small"
                                  Color="Color.Info"
                                  @onclick="OnEditShopNameClicked">
                            <span class="oi oi-pencil"></span>
                        </BSButton>
                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <BSButton Color="Color.Danger" @onclick="OnDeleteStoreButtonClicked">
                        Delete
                    </BSButton>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<StoreDto> stores = new List<StoreDto>();
    private Dictionary<uint, int> itemCountsInStore = new Dictionary<uint, int>();
    private StoreDto selectedStore;

    private IShoppingRepository repository;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        if (repository == null)
        {
            repository = shoppingRepositoryFactory.Create();
            stores = await repository.GetAllStoresAsync();
            LoadItemCountsInStores();
            StateHasChanged();
        }
    }

    private void LoadItemCountsInStores()
    {
        foreach(StoreDto store in stores)
        {
            int itemCount = repository.GetItemCountInStore(store.StoreId);
            itemCountsInStore.Add(store.StoreId, itemCount);
        }
    }

    private int GetItemCountInStoreById(uint storeId)
    {
        return itemCountsInStore.ContainsKey(storeId) ? itemCountsInStore[storeId] : 0;
    }

    private void OnEditShopNameClicked()
    {

    }

    private void OnDeleteStoreButtonClicked()
    {

    }

    private void OnNewStoreButtonClicked()
    {

    }

    private void OnSelectedStoreChanged(StoreDto store)
    {
        selectedStore = store;
    }
}
