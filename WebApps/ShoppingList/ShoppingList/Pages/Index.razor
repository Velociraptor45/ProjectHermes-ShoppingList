@page "/"
@inject IShoppingRepositoryFactory shoppingRepositoryFactory

<div class="main-page">
    <div>
        <div class="d-flex">
            <h1 class="h1 col-7 col-sm-5 col-md-5 col-lg-4 col-xl-3 mb-0 pr-0">Shopping List</h1>

            <BSForm Model="@activeStore" Class="col-5 col-sm-7 col-md-7 col-lg-8 col-xl-9 pr-0 w-max-200 ml-auto">
                <BSInput T="string" InputType="InputType.Select" Class="" @bind-Value="storeInit">
                    @foreach (StoreDto store in stores)
                    {
                        <CustomSelectOption T="StoreDto"
                                            Item="@store"
                                            OptionText="@store.Name"
                                            OnClickCallback="OnChangeStore"></CustomSelectOption>
                    }
                </BSInput>
            </BSForm>
        </div>
        <div class="row mt-2">
            <div class="col-xl-5 col-sm-12 mb-2 pl-0">
                <div class="row ml-0">
                    <BSBasicInput Class="col-10 col-md-11"
                                  T="string"
                                  @bind-Value="newShoppingItemName"
                                  @onfocusout="OnInputFocusLost"
                                  @oninput="OnSearchInput"></BSBasicInput>
                    <BSButton Color="Color.Success" Class="col-2 col-md-1" @onclick="OnAddNewItemClicked">
                        <span class="oi oi-plus"></span>
                    </BSButton>
                </div>
                <div class="position-absolute z-10 w-100 bg-white">
                    @foreach (var item in itemSuggestions)
                    {
                        <ItemSearchSuggestion Item="@item" ItemSelectedCallback="OnSearchItemSelected"></ItemSearchSuggestion>
                    }
                </div>
            </div>
            <div class="col-xl-7 col-sm-12 p-0">
                <ul id="shoppingList" class="p-0">
                    @foreach (var shoppingItem in activeShoppingItems)
                    {
                        <ShoppingListItem @key="@shoppingItem"
                                          ItemDto="@shoppingItem"
                                          ItemChangedCallback="UpdateItem"
                                          RemoveItemCallback="OnRemoveItemFromShoppingList"></ShoppingListItem>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="@(hideItemEditor ? "hidden" : "") item-editor-container">
        @*<ItemEditor ItemDto="@newItem"
                    EditMode="@EntityModels.ItemEditMode.Create"
                    AvailableStores="@stores"
                    CanChangeStore="false"
                    OnSaveCallback="OnSaveNewItem"
                    OnCancleCallback="OnCancleNewItem"></ItemEditor>*@
    </div>

    <div>
        <BSButton @onclick="OnShoppingFinished">Finish shopping</BSButton>
    </div>
</div>



@code {
    private List<EntityModels.ItemDto> itemSuggestions = new List<EntityModels.ItemDto>();

    private List<StoreDto> stores = new List<StoreDto>();
    private StoreDto activeStore = new StoreDto();
    private Database.Entities.ShoppingList activeShoppingList;
    private List<EntityModels.ItemDto> activeShoppingItems = new List<EntityModels.ItemDto>();

    private string newShoppingItemName = "";
    private IShoppingRepository shoppingRepository;

    private System.Timers.Timer hideSuggestionsTimer = new System.Timers.Timer(100);

    private bool hideItemEditor = true;
    private EntityModels.ItemDto newItem = new EntityModels.ItemDto();

    private string storeInit = string.Empty;

    protected async override void OnInitialized()
    {
        if (shoppingRepository == null)
        {
            shoppingRepository = shoppingRepositoryFactory.Create();

            hideSuggestionsTimer.AutoReset = false;
            hideSuggestionsTimer.Elapsed += OnHideSuggestionsTimerElapsed;

            stores = await shoppingRepository.GetAllStoresAsync();
            activeStore = stores.Count > 0 ? stores.First() : null;

            if (activeStore == null)
            {
                //TODO: send notification to user
            }
            else
            {
                LoadShoppingListForActiveStore();
                SetInitStrings();
            }
            StateHasChanged();
        }
    }

    private void SetInitStrings()
    {
        storeInit = activeStore.Name;
    }

    private void LoadShoppingListForActiveStore()
    {
        activeShoppingList = shoppingRepository.GetActiveShoppingListByStoreId(activeStore.StoreId);
        if (activeShoppingList == null)
        {
            activeShoppingList = shoppingRepository.CreateNewShoppingList(activeStore.StoreId);
        }
        else
        {
            activeShoppingItems = shoppingRepository.GetAllItemsOnShoppingList(activeShoppingList.ShoppingListId);
        }
        StateHasChanged();
    }

    private void UpdateItem(EntityModels.ItemDto itemDto)
    {
        shoppingRepository.UpdateItemRelation(itemDto, activeShoppingList.ShoppingListId);
    }

    #region callbacks
    private void OnRemoveItemFromShoppingList(EntityModels.ItemDto itemDto)
    {
        try
        {
            shoppingRepository.RemoveItemFromShoppingList(itemDto, activeShoppingList.ShoppingListId);
            activeShoppingItems.Remove(itemDto);
        }
        catch(Exception e)
        {
            //TODO notify user
        }
    }

    private void OnInputFocusLost()
    {
        hideSuggestionsTimer.Start();
    }

    private void OnHideSuggestionsTimerElapsed(Object source, System.Timers.ElapsedEventArgs args)
    {
        itemSuggestions.Clear();
        InvokeAsync(() => StateHasChanged());
    }

    private void OnChangeStore(StoreDto store)
    {
        activeStore = store;
        LoadShoppingListForActiveStore();
        StateHasChanged();
    }

    private void OnSearchItemSelected(EntityModels.ItemDto itemDto)
    {
        try
        {
            shoppingRepository.AddNewItemToShoppingList(itemDto, activeShoppingList.ShoppingListId);
        }
        catch (Exception e)
        {
            //TODO tell user that item already exists
        }
        activeShoppingItems.Add(itemDto);
        newShoppingItemName = String.Empty;
        itemSuggestions.Clear();
    }

    private void OnSearchInput(ChangeEventArgs args)
    {
        string search = ((string)args.Value).Trim();
        if (search != String.Empty)
        {
            //TODO refactor this
            var activeItemIds = activeShoppingItems.Select(item => item.Id);
            itemSuggestions = shoppingRepository
                .SearchItems(search)
                .Where(item => !activeItemIds.Contains(item.Id))
                .ToList();
        }
        else if (itemSuggestions.Count > 0)
        {
            itemSuggestions.Clear();
        }
    }

    private void OnShoppingFinished()
    {
        var notBoughtItems = activeShoppingItems.Where(item => !item.IsInShoppingBasket);
        shoppingRepository.AddItemsToNewShoppingList(notBoughtItems, activeStore.StoreId);
        shoppingRepository.RemoveItemsFromShoppingList(notBoughtItems, activeShoppingList.ShoppingListId);
        shoppingRepository.CompleteShoppingList(activeShoppingList);
        LoadShoppingListForActiveStore();
    }



    #region item editor
    private void OnAddNewItemClicked()
    {
        newItem = new EntityModels.ItemDto
        {
            Name = newShoppingItemName,
            PricePerQuantity = 1,
            StoreId = activeStore.StoreId,
            QuantityType = EntityModels.QuantityType.Unit
        };
        hideItemEditor = false;
        StateHasChanged();
    }

    private async void OnSaveNewItem(EntityModels.ItemDto itemDto, EntityModels.ItemEditMode editMode)
    {
        await shoppingRepository.CreateNewItemAsync(itemDto);
        hideItemEditor = true;
        StateHasChanged();
    }

    private void OnCancleNewItem(int i)
    {
        hideItemEditor = true;
        StateHasChanged();
    }
    #endregion
    #endregion
}