@page "/"
@inject DbContextOptions<ShoppingContext> dbContextOptions

<h1>Shopping List</h1>

<div>
    <BSDropdown @onselectionchange="OnSelectStore">
        <BSDropdownToggle Color="Color.Primary">&lt;select store&gt;</BSDropdownToggle>
        <BSDropdownMenu>
            @foreach (ShoppingList.Database.Entities.Store store in stores)
            {
                <BSDropdownItem @onclick="OnSelectStore">
                        @store.Name
                </BSDropdownItem>
            }
        </BSDropdownMenu>
    </BSDropdown>
</div>
<div class="row">
    <BSBasicInput Class="col-11" T="string" @bind-Value="newShoppingItemName"></BSBasicInput>
    <BSButton Class="col-1" @onclick="AddItemToList">Add</BSButton>
</div>
<div>
    <ul id="shoppingList">
        @foreach (var shoppingItem in shoppingItems)
        {
            <ShoppingListItem Item="shoppingItem" ItemChangedCallback="UpdateItem"></ShoppingListItem>
        }
    </ul>
</div>

@code {
    private List<ShoppingList.Database.Entities.Item> shoppingItems = new List<ShoppingList.Database.Entities.Item>();
    private List<ShoppingList.Database.Entities.Store> stores = new List<ShoppingList.Database.Entities.Store>();
    private int nextId = 0;
    private string newShoppingItemName;
    private IShoppingRepository shoppingRepository;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        shoppingRepository = new ShoppingRepository(dbContextOptions);

        stores = await shoppingRepository.GetAllStoresAsync();
    }

    private void OnSelectStore(EventArgs args)
    {
        int a = 0;
    }

    private void AddItemToList()
    {
        shoppingItems.Add(GenerateNewShoppingItem(newShoppingItemName));
        nextId++;
    }

    private ShoppingList.Database.Entities.Item GenerateNewShoppingItem(string itemName)
    {
        return null;
    }

    private void UpdateItem(ShoppingList.Database.Entities.Item item)
    {
        //save
    }


}