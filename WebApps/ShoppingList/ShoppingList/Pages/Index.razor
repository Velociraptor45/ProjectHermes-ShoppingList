@page "/"
@inject DbContextOptions<ShoppingContext> dbContextOptions

<h1>Shopping List</h1>

<div>
    <BSDropdown>
        <BSDropdownToggle Color="Color.Primary">@activeStore?.Name</BSDropdownToggle>
        <BSDropdownMenu>
            @foreach (Database.Entities.Store store in stores)
            {
                <BSDropdownItem>
                    <CustomDropdownItem T="Database.Entities.Store"
                                        Item="@store" 
                                        DropdownText="@store.Name" 
                                        OnClickCallback="OnChangeStore">

                    </CustomDropdownItem>
                </BSDropdownItem>
            }
        </BSDropdownMenu>
    </BSDropdown>
</div>
<div class="row">
    <BSBasicInput Class="col-11"
                  T="string"
                  @bind-Value="newShoppingItemName"
                  @onfocusout="OnInputFocusLost"
                  @oninput="OnSearchInput"></BSBasicInput>
    <BSButton Class="col-1">Add</BSButton>
</div>
<div>
    @foreach(var item in itemSuggestions)
    {
        <ItemSearchSuggestion Item="@item" ItemSelectedCallback="OnSearchItemSelected"></ItemSearchSuggestion>
    }
</div>
<div>
    <ul id="shoppingList">
        @foreach (var shoppingItem in activeShoppingItems)
        {
            <ShoppingListItem @key="@shoppingItem"
                              ItemDto="@shoppingItem"
                              ItemChangedCallback="UpdateItem"
                              RemoveItemCallback="OnRemoveItemFromShoppingList"></ShoppingListItem>
        }
    </ul>
</div>



@code {
    private List<EntityModels.ItemDto> itemSuggestions = new List<EntityModels.ItemDto>();

    private List<Database.Entities.Store> stores = new List<Database.Entities.Store>();
    private Database.Entities.Store activeStore;
    private Database.Entities.ShoppingList activeShoppingList;
    private List<EntityModels.ItemDto> activeShoppingItems = new List<EntityModels.ItemDto>();

    private string newShoppingItemName = "";
    private IShoppingRepository shoppingRepository;

    private System.Timers.Timer hideSuggestionsTimer = new System.Timers.Timer(100);

    protected async override void OnInitialized()
    {
        if (activeStore == null)
        {
            shoppingRepository = new ShoppingRepository(dbContextOptions);

            hideSuggestionsTimer.AutoReset = false;
            hideSuggestionsTimer.Elapsed += OnHideSuggestionsTimerElapsed;

            stores = await shoppingRepository.GetAllStoresAsync();
            activeStore = stores.Count > 0 ? stores.First() : null;

            if (activeStore == null)
            {
                //TODO: send notification to user
            }
            else
            {
                LoadShoppingListForActiveStore();
            }
        }
    }

    private void LoadShoppingListForActiveStore()
    {
        activeShoppingList = shoppingRepository.GetActiveShoppingListByStoreId(activeStore.StoreId);
        if (activeShoppingList == null)
        {
            activeShoppingList = shoppingRepository.CreateNewShoppingList(activeStore.StoreId);
        }
        else
        {
            activeShoppingItems = shoppingRepository.GetAllItemsOnShoppingList(activeShoppingList.ShoppingListId);
        }
        StateHasChanged();
    }

    private void UpdateItem(EntityModels.ItemDto itemDto)
    {
        shoppingRepository.UpdateItemQuantity(itemDto, activeShoppingList.ShoppingListId);
        Console.WriteLine("saved");
    }

    #region callbacks
    private void OnRemoveItemFromShoppingList(EntityModels.ItemDto itemDto)
    {
        try
        {
            shoppingRepository.RemoveItemFromShoppingList(itemDto, activeShoppingList.ShoppingListId);
            activeShoppingItems.Remove(itemDto);
        }
        catch(Exception e)
        {
            //TODO notify user
        }
    }

    private void OnInputFocusLost()
    {
        hideSuggestionsTimer.Start();
    }

    private void OnHideSuggestionsTimerElapsed(Object source, System.Timers.ElapsedEventArgs args)
    {
        itemSuggestions.Clear();
        InvokeAsync(() => StateHasChanged());
    }

    private void OnChangeStore(Database.Entities.Store store)
    {
        activeStore = store;
        LoadShoppingListForActiveStore();
    }

    private void OnSearchItemSelected(EntityModels.ItemDto itemDto)
    {
        try
        {
            shoppingRepository.AddNewItemToShoppingList(itemDto, activeShoppingList.ShoppingListId);
        }
        catch (Exception e)
        {
            //TODO tell user that item already exists
        }
        activeShoppingItems.Add(itemDto);
        newShoppingItemName = String.Empty;
        itemSuggestions.Clear();
    }

    private void OnSearchInput(ChangeEventArgs args)
    {
        string search = ((string)args.Value).Trim();
        if (search != String.Empty)
        {
            //TODO refactor this
            var activeItemIds = activeShoppingItems.Select(item => item.Id);
            itemSuggestions = shoppingRepository
                .SearchItems(search)
                .Where(item => !activeItemIds.Contains(item.Id))
                .ToList();
        }
        else if (itemSuggestions.Count > 0)
        {
            itemSuggestions.Clear();
        }
    }
    #endregion
}