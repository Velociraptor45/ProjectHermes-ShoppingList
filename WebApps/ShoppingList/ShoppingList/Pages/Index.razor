@page "/"
@inject DbContextOptions<ShoppingContext> dbContextOptions

<h1>Shopping List</h1>

<div>
    <BSDropdown>
        <BSDropdownToggle Color="Color.Primary">@activeStore?.Name</BSDropdownToggle>
        <BSDropdownMenu>
            @foreach (Database.Entities.Store store in stores)
            {
                <BSDropdownItem>
                    <CustomDropdownItem T="Database.Entities.Store"
                                        Item="@store" 
                                        DropdownText="@store.Name" 
                                        OnClickCallback="OnChangeStore">

                    </CustomDropdownItem>
                </BSDropdownItem>
            }
        </BSDropdownMenu>
    </BSDropdown>
</div>
<div class="row">
    <BSBasicInput Class="col-11"
                  T="string"
                  @bind-Value="newShoppingItemName"
                  @onfocusout="OnInputFocusLost"
                  @oninput="OnSearchInput"></BSBasicInput>
    <BSButton Class="col-1">Add</BSButton>
</div>
<div>
    @foreach(var item in itemSuggestions)
    {
        <ItemSearchSuggestion Item="@item" ItemSelectedCallback="OnSearchItemSelected"></ItemSearchSuggestion>
    }
</div>
<div>
    <ul id="shoppingList">
        @foreach (var shoppingItem in shoppingItems)
        {
            <ShoppingListItem Item="shoppingItem" ItemChangedCallback="UpdateItem"></ShoppingListItem>
        }
    </ul>
</div>



@code {
    private List<Database.Entities.Item> shoppingItems = new List<Database.Entities.Item>();
    private List<Database.Entities.Item> itemSuggestions = new List<Database.Entities.Item>();
    private List<Database.Entities.Store> stores = new List<Database.Entities.Store>();
    private Database.Entities.Store activeStore;
    private int nextId = 0;
    private string newShoppingItemName = "";
    private IShoppingRepository shoppingRepository;

    private System.Timers.Timer hideSuggestionsTimer = new System.Timers.Timer(50);

    protected async override void OnInitialized()
    {
        shoppingRepository = new ShoppingRepository(dbContextOptions);

        hideSuggestionsTimer.AutoReset = false;
        hideSuggestionsTimer.Elapsed += OnHideSuggestionsTimerElapsed;

        stores = await shoppingRepository.GetAllStoresAsync();
        activeStore = stores.Count > 0 ? stores.First() : null;
    }

    private Database.Entities.Item GenerateNewShoppingItem(string itemName)
    {
        return new Database.Entities.Item
        {
            ItemId = (uint)nextId,
            Name = "testitem",
            QuantityType = new Database.Entities.QuantityType(),
            PricePerQuantity = 3.4m
        };
    }

    private void UpdateItem(Database.Entities.Item item)
    {
        //save
    }

    private void OnInputFocusLost()
    {
        hideSuggestionsTimer.Start();
    }

    private void OnHideSuggestionsTimerElapsed(Object source, System.Timers.ElapsedEventArgs args)
    {
        itemSuggestions.Clear();
        InvokeAsync(() => StateHasChanged());
    }

    private void OnChangeStore(Database.Entities.Store store)
    {
        activeStore = store;
        //reload shopping list
    }

    private void OnSearchItemSelected(Database.Entities.Item item)
    {
        shoppingItems.Add(item);
        //save to database
        newShoppingItemName = String.Empty;
        itemSuggestions.Clear();
    }

    private void OnSearchInput(ChangeEventArgs args)
    {
        string search = ((string)args.Value).Trim();
        if (search != String.Empty)
        {
            itemSuggestions = shoppingRepository.SearchItems(search);
        }
        else if (itemSuggestions.Count > 0)
        {
            itemSuggestions.Clear();
        }
    }
}