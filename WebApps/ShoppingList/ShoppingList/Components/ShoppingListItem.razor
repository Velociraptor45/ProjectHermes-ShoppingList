<li>
    <div class="row">
        <div class="col-8">
            <BSBasicInput T="string" Value="@ItemDto.Name" ValueChanged="OnItemNameChanged"></BSBasicInput>
        </div>
        <div class="col-4">
            <!-- The input will be disabled until I can prevent
                the user from inputting letters - without using an InputType-->
            <BSBasicInput T="int"
                          Value="@Quantity"
                          @onfocusout="OnQuantityChanged"
                          IsDisabled="true"></BSBasicInput>

            <BSButton type="button" @onclick="DecrementAmount">-</BSButton>
            <BSButton type="button" @onclick="IncrementAmount">+</BSButton>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public EntityModels.ItemDto ItemDto { get; set; }

    [Parameter]
    public EventCallback<EntityModels.ItemDto> ItemChangedCallback { get; set; }

    // BlazorStrap currently doesn't support uint as a Type in BSBasicInput,
    // so the ItemDto.Quantity must be converted to int until this is fixed
    private int Quantity;

    private uint SingleQuantityUnit;

    protected override void OnInitialized()
    {
        SingleQuantityUnit = GetSingleQuantityUnit();
        UpdateQuantity();
    }

    private void IncrementAmount()
    {
        ItemDto.Quantity += SingleQuantityUnit;
        UpdateQuantity();
    }

    private void DecrementAmount()
    {
        if(ItemDto.Quantity - SingleQuantityUnit > ItemDto.Quantity)
        {
            ItemDto.Quantity = 0;
        }
        else
        {
            ItemDto.Quantity -= SingleQuantityUnit;
        }
        UpdateQuantity();
    }

    private void UpdateQuantity()
    {
        Quantity = (int)ItemDto.Quantity;
    }

    private uint GetSingleQuantityUnit()
    {
        switch (ItemDto.QuantityType)
        {
            case EntityModels.QuantityType.Unit:
                return 1;
            case EntityModels.QuantityType.Weight:
                return 100;
            default:
                throw new Exception($"Unknown type {ItemDto.QuantityType} encountered");
        }
    }

    private void OnQuantityChanged()
    {
        if (Quantity < 0)
            Quantity = 0;

        ItemDto.Quantity = (uint)Quantity;
        UpdateItem();
    }

    private void OnItemNameChanged(string newValue)
    {
        ItemDto.Name = newValue;
        UpdateItem();
    }

    private void UpdateItem()
    {
        ItemChangedCallback.InvokeAsync(ItemDto);
    }
}
