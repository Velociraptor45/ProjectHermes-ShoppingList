@using ShoppingList.Util;

    <li class="shopping-item @backgroundColorClassName">
        <div class="py-1 px-2">
            @if (IsInEditMode)
            {
                <!-- Name -->
                <div class="h2 m-0">
                    @ItemDto.Name
                </div>
                <div class="d-flex">
                    <!-- Quantity -->
                    <div class="d-flex">
                        <div class="d-flex">
                            <span>
                                <BSBasicInput Class="w-max-70"
                                              Size="buttonSize"
                                              T="int"
                                              InputType="InputType.Number"
                                              @bind-Value="@Quantity"
                                              @onfocusout="OnQuantityChanged"></BSBasicInput>
                            </span>
                            <span class="align-self-center">@LabelTranslator.GetQuantityLabel(ItemDto.QuantityType)</span>
                        </div>
                        <div class="pl-3">
                            <BSButtonGroup Size="buttonSize">
                                <BSButton Color="Color.Danger" type="button"
                                          Class="decrement-amount"
                                          @onclick="DecrementQuantity">
                                    <span class="oi oi-minus"></span>
                                </BSButton>
                                <BSButton Color="Color.Success"
                                          Class="increment-amount"
                                          @onclick="IncrementQuantity">
                                    <span class="oi oi-plus"></span>
                                </BSButton>
                            </BSButtonGroup>
                        </div>
                    </div>
                    <!-- Buttons -->
                    <div class="ml-auto d-flex">
                        @if (ItemDto.IsTemporary)
                        {
                            <div class="px-2">
                                <BSButton Color="Color.Danger"
                                          Class="@(ItemDto.IsInShoppingBasket ? "float-right" : "border-black float-right")"
                                          @onclick="OnMakeTemporaryItemPermanentButtonClicked"
                                          Size="buttonSize">
                                    <span class="oi oi-data-transfer-download"></span>
                                </BSButton>
                            </div>
                        }
                        <div>
                            <BSButton Color="Color.Danger"
                                      Class="@(ItemDto.IsInShoppingBasket ? "float-right" : "border-black float-right")"
                                      @onclick="OnRemoveButtonClicked"
                                      Size="buttonSize">
                                <span class="oi oi-x"></span>
                            </BSButton>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex">
                    <!-- Quantity -->
                    <div class="h2 m-0">
                        <span>@ItemDto.Quantity</span><span class="h4 m-0">@LabelTranslator.GetQuantityLabel(ItemDto.QuantityType)</span>
                    </div>
                    <!-- Name -->
                    <div class="h2 m-0 pl-2">
                        @ItemDto.Name
                    </div>
                    @if (!ItemDto.IsTemporary)
                    {
                        <!-- Price -->
                        <div class="px-2 m-0 align-self-center ml-auto">
                            <span>@currentPrice</span><span>€</span>
                        </div>
                    }
                </div>
            }
        </div>
</li>

@code {
    [Parameter]
    public EntityModels.ItemDto ItemDto { get; set; }

    [Parameter]
    public EventCallback<EntityModels.ItemDto> ItemChangedCallback { get; set; }

    [Parameter]
    public EventCallback<EntityModels.ItemDto> RemoveItemCallback { get; set; }

    [Parameter]
    public bool IsInEditMode { get; set; }

    private string backgroundColorClassName = ItemNotInBasketColor;
    private Size buttonSize = Size.Small;

    private const string ItemInBasketColor = "bg-green";
    private const string ItemNotInBasketColor = "bg-red";
    private const int UnitStandardQuantity = 1;
    private const int WeightStandardQuantity = 100;
    private const int FluidStandardQuantity = 100;

    // BlazorStrap currently doesn't support uint as a Type in BSBasicInput,
    // so the ItemDto.Quantity must be converted to int until this is fixed
    private int Quantity;

    private uint SingleQuantityUnit;
    private decimal currentPrice;

    protected override void OnInitialized()
    {
        SingleQuantityUnit = GetSingleQuantityUnit();
        UpdateBackgroundColor();
        UpdateQuantity();
        RecalculatePrice();
    }

    private void IncrementQuantity()
    {
        ItemDto.Quantity += SingleQuantityUnit;
        UpdateQuantity();
        RecalculatePrice();
        UpdateItem();
    }

    private void DecrementQuantity()
    {
        if(ItemDto.Quantity - SingleQuantityUnit > ItemDto.Quantity)
        {
            ItemDto.Quantity = 0;
        }
        else
        {
            ItemDto.Quantity -= SingleQuantityUnit;
        }
        UpdateQuantity();
        RecalculatePrice();
        UpdateItem();
    }

    private void RecalculatePrice()
    {
        currentPrice = ItemDto.Quantity * (decimal)ItemDto.PricePerQuantity;
        if (ItemDto.QuantityType != EntityModels.QuantityType.Unit)
        {
            currentPrice /= 1000; //g to kg conversion
        }
        currentPrice = Math.Truncate(100 * currentPrice) / 100;
    }

    private void UpdateBackgroundColor()
    {
        if (ItemDto.IsInShoppingBasket)
            backgroundColorClassName = ItemInBasketColor;
        else
            backgroundColorClassName = ItemNotInBasketColor;
    }

    private void UpdateQuantity()
    {
        Quantity = (int)ItemDto.Quantity;
    }

    private uint GetSingleQuantityUnit()
    {
        switch (ItemDto.QuantityType)
        {
            case EntityModels.QuantityType.Unit:
                return UnitStandardQuantity;
            case EntityModels.QuantityType.Weight:
                return WeightStandardQuantity;
            case EntityModels.QuantityType.Fluid:
                return FluidStandardQuantity;
            default:
                throw new Exception($"Unknown type {ItemDto.QuantityType} encountered");
        }
    }

    private void OnQuantityChanged()
    {
        if (Quantity < 0)
            Quantity = 0;

        ItemDto.Quantity = (uint)Quantity;
        UpdateItem();
        RecalculatePrice();
    }

    private void OnItemClicked()
    {
        ItemDto.IsInShoppingBasket = !ItemDto.IsInShoppingBasket;
        UpdateBackgroundColor();
        UpdateItem();
    }

    private void OnRemoveButtonClicked()
    {
        RemoveItemCallback.InvokeAsync(ItemDto);
    }

    private void UpdateItem()
    {
        ItemChangedCallback.InvokeAsync(ItemDto);
    }

    private void OnMakeTemporaryItemPermanentButtonClicked()
    {

    }
}
