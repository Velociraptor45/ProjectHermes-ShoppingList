<div class="item-editor col">
    <div class="form-container p-2">
        <div class="row">
            <div class="input-group col-10">
                <div class="input-group-prepend">
                    <span class="input-group-text">Article</span>
                </div>
                <BSBasicInput T="string"
                              @bind-Value="@ItemDto.Name"></BSBasicInput>
            </div>
            <div class="closing-button col-2">
                <BSButton Color="Color.Danger" @onclick="OnCancleClicked">
                    <span class="oi oi-x"></span>
                </BSButton>
            </div>
        </div>

        <div class="@(hideStoreDropdown ? "hidden" : "")">
            <BSDropdown>
                <BSDropdownToggle Color="Color.Primary">@(selectedStore?.Name ?? "Choose store")</BSDropdownToggle>
                <BSDropdownMenu>
                    @foreach (Database.Entities.Store store in AvailableStores)
                    {
                        <BSDropdownItem>
                            <CustomDropdownItem T="Database.Entities.Store"
                                                Item="@store"
                                                DropdownText="@store.Name"
                                                OnClickCallback="OnStoreChanged">

                            </CustomDropdownItem>
                        </BSDropdownItem>
                    }
                </BSDropdownMenu>
            </BSDropdown>
        </div>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Price per Quantity</span>
            </div>
            <BSBasicInput T="decimal" @bind-Value="@ItemDto.PricePerQuantity"></BSBasicInput>
            <div class="input-group-append">
                <span class="input-group-text">€</span>
            </div>
        </div>
        <div>
            <BSDropdown>
                <BSDropdownToggle Color="Color.Primary">@selectedQuantityName</BSDropdownToggle>
                <BSDropdownMenu>
                    @foreach (EntityModels.QuantityType quantityType in availableQuantityTypes)
                    {
                        <BSDropdownItem>
                            <CustomDropdownItem T="EntityModels.QuantityType"
                                                Item="@quantityType"
                                                DropdownText="@quantityType.ToString()"
                                                OnClickCallback="OnQuantityTypeChanged">

                            </CustomDropdownItem>
                        </BSDropdownItem>
                    }
                </BSDropdownMenu>
            </BSDropdown>
        </div>

        <div>
            <BSButtonGroup>
                <BSButton Color="Color.Success" @onclick="OnSaveClicked">Save</BSButton>
                
                <BSButton Color="Color.Danger"
                            @onclick="OnDeactivateClicked"
                            IsDisabled="@(EditMode == EntityModels.ItemEditMode.Create)">Deactivate</BSButton>
            </BSButtonGroup>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EntityModels.ItemDto ItemDto { get; set; }
    [Parameter]
    public EntityModels.ItemEditMode EditMode { get; set; }
    [Parameter]
    public List<Database.Entities.Store> AvailableStores { get; set; } = new List<Database.Entities.Store>();
    [Parameter]
    public Action<EntityModels.ItemDto, EntityModels.ItemEditMode, Database.Entities.Store> OnSaveCallback { get; set; }
    [Parameter]
    public Action<int> OnCancleCallback { get; set; }
    [Parameter]
    public Action<EntityModels.ItemDto> OnDeactivateCallback { get; set; }

    private List<EntityModels.QuantityType> availableQuantityTypes =
        Enum.GetValues(typeof(EntityModels.QuantityType)).Cast<EntityModels.QuantityType>().ToList();

    private string selectedQuantityName { get; set; }
    private Database.Entities.Store selectedStore { get; set; }
    private bool hideStoreDropdown = false;

    protected override void OnInitialized()
    {
        if(EditMode != EntityModels.ItemEditMode.Create)
        {
            hideStoreDropdown = true;
        }



        selectedQuantityName = ItemDto.QuantityType.ToString();
    }

    private void OnSaveClicked()
    {
        OnSaveCallback.Invoke(ItemDto, EditMode, selectedStore);
    }

    private void OnDeactivateClicked()
    {
        OnDeactivateCallback?.Invoke(ItemDto);
    }

    private void OnCancleClicked()
    {
        OnCancleCallback?.Invoke(0);
    }

    private void OnQuantityTypeChanged(EntityModels.QuantityType quantityType)
    {
        ItemDto.QuantityType = quantityType;
        selectedQuantityName = ItemDto.QuantityType.ToString();
    }

    private void OnStoreChanged(Database.Entities.Store store)
    {
        selectedStore = store;
    }
}
