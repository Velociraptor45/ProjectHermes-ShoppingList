<div class="item-editor col">
    <div class="form-container p-2">
        <div class="row pb-2">
            <div class="closing-button col-12 pb-2">
                <BSButton Class="float-right" Color="Color.Danger" @onclick="OnCancleClicked">
                    <span class="oi oi-x"></span>
                </BSButton>
            </div>
            <div class="col-8">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Article</span>
                    </div>
                    <BSBasicInput T="string"
                                    @bind-Value="@ItemDto.Name"></BSBasicInput>
                </div>
                <div class="font-red @(showMissingArticleNameLabel ? "" : "hidden")">No item name specified</div>
            </div>
            <div class="col-4 pl-0">
                <div class="@(CanChangeStore ? "" : "@*hidden*@")">
                    <BSDropdown>
                        <BSDropdownToggle Color="Color.Primary">
                            @(AvailableStores.FirstOrDefault(s => s.StoreId == ItemDto.StoreId)?.Name ?? "Choose store")
                        </BSDropdownToggle>
                        <BSDropdownMenu>
                            @foreach (StoreDto store in AvailableStores)
                            {
                                <BSDropdownItem>
                                    <CustomDropdownItem T="StoreDto"
                                                        Item="@store"
                                                        DropdownText="@store.Name"
                                                        OnClickCallback="OnStoreChanged">

                                    </CustomDropdownItem>
                                </BSDropdownItem>
                            }
                        </BSDropdownMenu>
                    </BSDropdown>
                    <div class="font-red @(showNoStoreSelectedLabel ? "" : "hidden")">No store selected</div>
                </div>
            </div>
        </div>

        <div class="row pb-4">
            <div class="col-8">
                <div class="input-group">
                    <BSBasicInput InputType="InputType.Number" T="decimal" @bind-Value="@ItemDto.PricePerQuantity"></BSBasicInput>
                    <div class="input-group-append">
                        <span class="input-group-text">
                            €@(ItemDto.QuantityType == EntityModels.QuantityType.Unit ? "" : "/kg")
                        </span>
                    </div>
                </div>
                <div class="font-red @(showMissingPriceLabel ? "" : "hidden")">No price specified</div>
            </div>
            <div class="col-4 pl-0">
                <BSDropdown>
                    <BSDropdownToggle Color="Color.Primary">@ItemDto.QuantityType.ToString()</BSDropdownToggle>
                    <BSDropdownMenu>
                        @foreach (EntityModels.QuantityType quantityType in availableQuantityTypes)
                        {
                            <BSDropdownItem>
                                <CustomDropdownItem T="EntityModels.QuantityType"
                                                    Item="@quantityType"
                                                    DropdownText="@quantityType.ToString()"
                                                    OnClickCallback="OnQuantityTypeChanged">

                                </CustomDropdownItem>
                            </BSDropdownItem>
                        }
                    </BSDropdownMenu>
                </BSDropdown>
            </div>
        </div>

        <div class="row">
            <div class="col-6">
                <BSButton Class="@(EditMode == EntityModels.ItemEditMode.Create ? "float-left hidden" : "float-left")"
                            Color="Color.Danger"
                            @onclick="OnDeactivateClicked"
                            IsDisabled="false">Deactivate</BSButton>
            </div>
            <div class="col-6">
                <BSButton Class="float-right"
                            Color="Color.Success"
                            @onclick="OnSaveClicked">Save</BSButton>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EntityModels.ItemDto ItemDto { get; set; }
    [Parameter]
    public EntityModels.ItemEditMode EditMode { get; set; }
    [Parameter]
    public List<StoreDto> AvailableStores { get; set; } = new List<StoreDto>();
    [Parameter]
    public bool CanChangeStore { get; set; } = true;

    [Parameter]
    public Action<EntityModels.ItemDto, EntityModels.ItemEditMode> OnSaveCallback { get; set; }
    [Parameter]
    public Action<int> OnCancleCallback { get; set; }
    [Parameter]
    public Action<EntityModels.ItemDto> OnDeactivateCallback { get; set; }

    private List<EntityModels.QuantityType> availableQuantityTypes =
        Enum.GetValues(typeof(EntityModels.QuantityType)).Cast<EntityModels.QuantityType>().ToList();

    private bool showNoStoreSelectedLabel = false;
    private bool showMissingArticleNameLabel = false;
    private bool showMissingPriceLabel = false;

    protected override void OnParametersSet()
    {
        if(EditMode == EntityModels.ItemEditMode.Create
            && CanChangeStore
            && AvailableStores.Any())
        {
            OnStoreChanged(AvailableStores.First());
        }
    }

    private void OnSaveClicked()
    {
        showMissingArticleNameLabel = String.IsNullOrEmpty(ItemDto.Name.Trim());
        showMissingPriceLabel = ItemDto.PricePerQuantity == 0;
        showNoStoreSelectedLabel = AvailableStores.FirstOrDefault(s => s.StoreId == ItemDto.StoreId) == null;

        if (!showNoStoreSelectedLabel && !showMissingPriceLabel && !showMissingArticleNameLabel)
        {
            OnSaveCallback.Invoke(ItemDto, EditMode);
        }
    }

    private void OnDeactivateClicked()
    {
        OnDeactivateCallback?.Invoke(ItemDto);
    }

    private void OnCancleClicked()
    {
        OnCancleCallback?.Invoke(0);
    }

    private void OnQuantityTypeChanged(EntityModels.QuantityType quantityType)
    {
        ItemDto.QuantityType = quantityType;
    }

    private void OnStoreChanged(StoreDto store)
    {
        ItemDto.StoreId = store.StoreId;
    }
}
